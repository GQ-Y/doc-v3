{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuMutex.ts", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuDefine.ts", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuUtils.ts", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuIconCheck.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuIconRight.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuItem.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuSeparator.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuSeparator.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextSubMenu.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextSubMenu.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextSubMenuWrapper.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenu.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuGroup.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/ContextMenuInstance.ts", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/MenuBarIconMenu.vue", "../../../node_modules/.pnpm/@imengyu+vue3-context-menu@1.4.2/node_modules/@imengyu/vue3-context-menu/library/MenuBar.vue"],
  "sourcesContent": ["import type { ContextMenuInstance } from \"./ContextMenuDefine\";\r\n\r\nlet currentOpenedContextMenu : ContextMenuInstance|null = null;\r\n\r\n\r\nexport function checkOpenedContextMenu() : boolean {\r\n  return currentOpenedContextMenu !== null;\r\n}\r\nexport function addOpenedContextMenu(inst: ContextMenuInstance) : void {\r\n  if (currentOpenedContextMenu)\r\n    closeContextMenu();\r\n  currentOpenedContextMenu = inst;\r\n}\r\nexport function removeOpenedContextMenu(inst: ContextMenuInstance) : void {\r\n  if (inst === currentOpenedContextMenu)\r\n    currentOpenedContextMenu = null;\r\n}  \r\n/**\r\n * Close the currently open menu\r\n */\r\nexport function closeContextMenu() : void {\r\n  if (currentOpenedContextMenu) {\r\n    currentOpenedContextMenu.closeMenu();\r\n    currentOpenedContextMenu = null;\r\n  }\r\n}\r\n", "import type { Ref, SVGAttributes, TransitionProps, VNode } from \"vue\";\r\n\r\n/**\r\n * Default config\r\n */\r\nexport const MenuConstOptions = {\r\n  defaultDirection: 'br',\r\n  defaultMinWidth: 100,\r\n  defaultMaxWidth: 600,\r\n  defaultZindex: 100,\r\n  defaultZoom: 1,\r\n  defaultAdjustPadding: {\r\n    x: 0,\r\n    y: 10.\r\n  },\r\n}\r\n\r\n/**\r\n * ContextMenu Component ref interface,\r\n * You can use `(this.$refs.myMenu as ContextMenuInstance)` or `const mymenu = ref<ContextMenuInstance>()`\r\n */\r\nexport interface ContextMenuInstance {\r\n  /**\r\n   * Close this menu.\r\n   * @param fromItem The last clicked menu item, will pass to `MenuOptions.onClose` callback, if user does not click any item, can be `undefined`.\r\n   */\r\n  closeMenu(fromItem?: MenuItem|undefined): void;\r\n  /**\r\n   * Check if the menu is currently closed.\r\n   */\r\n  isClosed(): boolean;\r\n  /**\r\n   * Get current Menu root instance.\r\n   * @returns Return ContextSubMenuInstance of root, return undefined if menu is not showing.\r\n   */\r\n  getMenuRef(): ContextSubMenuInstance|undefined;\r\n  /**\r\n   * Get root menu size.\r\n   * @returns Return root menu size in pixel, return all zero if menu is not showing.\r\n   */\r\n  getMenuDimensions(): { width: number, height: number };\r\n}\r\n\r\n/**\r\n * Define that Submenu holder component exposed props\r\n * \r\n * Can get by `ContextMenuInstance.getMenuRef`.\r\n */\r\nexport interface ContextSubMenuInstance \r\n{\r\n  /**\r\n   * Get Root element of this submenu\r\n   */\r\n  getSubmenuRoot: () => HTMLElement | undefined;\r\n  /**\r\n   * Get Inner container element of this submenu\r\n   */\r\n  getMenu: () => HTMLElement | undefined;\r\n  /**\r\n   * Get child menu item by array index, Only after the parent submenu is displayed can the child items be retrieved.\r\n   * @param index Array index \r\n   * @returns You can obtain control instance `MenuItemContext according to the index to control menu items.\r\n   */\r\n  getChildItem: (index: number) => MenuItemContext | undefined;\r\n  /**\r\n   * Get submenu root element size.\r\n   * @returns Return root menu size in pixel, return all zero if menu is not showing.\r\n   */\r\n  getMenuDimensions(): { width: number, height: number };\r\n  /**\r\n   * Get submenu current scroll value (same as element.scrollTop)\r\n   * @returns \r\n   */\r\n  getScrollValue: () => number,\r\n  /**\r\n   * Set submenu current scroll value (same as element.scrollTop)\r\n   * @returns \r\n   */\r\n  setScrollValue: (v: number) => void,\r\n  /**\r\n   * Get submenu max scroll height (same as element.scrollHeight)\r\n   * @returns \r\n   */\r\n  getScrollHeight: () => number,\r\n  /**\r\n   * Get max submenu height\r\n   * @returns \r\n   */\r\n  getMaxHeight: () => number,\r\n  /**\r\n   * Get submenu current position (Relative to the parent item)\r\n   * @returns \r\n   */\r\n  getPosition: () => { x: number, y: number },\r\n  /**\r\n   * Set submenu current position (Relative to the parent item)\r\n   * @returns \r\n   */\r\n  setPosition: (x: number, y: number) => void;\r\n}\r\n\r\n/**\r\n * Ref define of ContextMenuGroup\r\n */\r\nexport interface ContextMenuGroupRef\r\n{\r\n  /**\r\n   * Get ContextSubMenuInstance of this group\r\n   */\r\n  getSubMenuRef(): ContextSubMenuInstance;\r\n  /**\r\n   * Get MenuItemContext of this item.\r\n   */\r\n  getMenuItemRef(): ContextSubMenuInstance;\r\n}\r\n\r\n/**\r\n * The internal info context for menu item\r\n */\r\nexport interface MenuItemContext {\r\n  /**\r\n   * Get current showing submenu instance.\r\n   * @returns Return ContextSubMenuInstance of current submenu, return undefined if menu is not showing.\r\n   */\r\n  getSubMenuInstance: () => ContextSubMenuInstance|undefined;\r\n  /**\r\n   * Show submenu of this item.\r\n   * @returns \r\n   */\r\n  showSubMenu: () => boolean,\r\n  /**\r\n   * Force hide submenu of this item.\r\n   */\r\n  hideSubMenu: () => void,\r\n  /**\r\n   * Get html Element of this item.\r\n   */\r\n  getElement: () => HTMLElement|undefined,\r\n  /**\r\n   * Check is this item disabled or hidden.\r\n   * @returns \r\n   */\r\n  isDisabledOrHidden: () => boolean,\r\n\r\n  focus: () => void,\r\n  blur: () => void,\r\n  click: (e: MouseEvent|KeyboardEvent) => void,\r\n}\r\n\r\nexport type MenuPopDirection = 'br'|'b'|'bl'|'tr'|'t'|'tl'|'l'|'r';\r\nexport type MenuChildren = MenuItem[];\r\n\r\n\r\nexport interface MenuOptions {\r\n  /**\r\n   * The items for this menu.\r\n   */\r\n  items\t?:\tMenuItem[];\r\n  /**\r\n   * Menu display x position.\r\n   */\r\n  x: number;\r\n  /**\r\n   * Menu display y position.\r\n   */\r\n  y: number;\r\n  /**\r\n  * X-coordinate offset of submenu and parent menu.\r\n  */\r\n  xOffset\t?: number;\r\n  /**\r\n  * Y-coordinate offset of submenu and parent menu.\r\n  */\r\n  yOffset ?: number;\r\n  /**\r\n   * Set the mian menu pop-up direction relative to coordinates.\r\n   *\r\n   * Default is `'br'`, if `adjustPosition` is true then the menu will determine\r\n   * the pop-up direction based on its distance from the screen edge.\r\n   *\r\n   * @default 'br'\r\n   */\r\n  direction ?: MenuPopDirection,\r\n  /**\r\n   * The z-index of this menu.\r\n   */\r\n  zIndex ?: number;\r\n  /**\r\n   * The zoom of this menu.\r\n   */\r\n  zoom ?: number;\r\n  /**\r\n   * Custom menu class.\r\n   */\r\n  customClass\t?:\tstring;\r\n  /**\r\n   * Set whether users can use the mouse scroll wheel to scroll through long menus in the menu area.\r\n   *\r\n   * @default false\r\n   */\r\n  mouseScroll ?: boolean;\r\n  /**\r\n   * Determine whether the up/down buttons in the menu item require space holder.\r\n   * The purpose of this variable is because some menu themes add blank padding above and below the menu,\r\n   * which are just enough to place up/down buttons.\r\n   * If there is no blank padding in your custom menu theme, you can set this field to provide blank space for up/down buttons to prevent obscuring menu items.\r\n   *\r\n   * @default false\r\n   */\r\n  updownButtonSpaceholder?: boolean;\r\n  /**\r\n   * Theme for this menu. Default is 'default'\r\n   *\r\n   * |theme|explain|example image|\r\n   * |--|--|--|\r\n   * |`default`|Default theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-default.jpg)|\r\n   * |`default dark`|Default theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-default-dark.jpg)|\r\n   * |`flat`|Simple flat theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-flat.jpg)|\r\n   * |`flat dark`|Simple flat theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-flat-dark.jpg)|\r\n   * |`win10`|Win10 like theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-win10.jpg)|\r\n   * |`win10 dark`|Win10 like theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-win10-dark.jpg)|\r\n   * |`mac`|Mac like theme|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-mac.jpg)|\r\n   * |`mac dark`|Mac like theme with dark|![example-default-dark.jpg](https://raw.githubusercontent.com/imengyu/vue3-context-menu/main/screenshot/example-mac-dark.jpg)|\r\n   *\r\n   * You can write new theme in your own css,\r\n   * customize your theme by overriding the default styles, for example:\r\n   * ```scss\r\n   * .mx-context-menu.my-theme-name {\r\n      & {\r\n        //Here can override css vars\r\n        --mx-menu-backgroud: #ececec;\r\n        --mx-menu-hover-backgroud: #0165e1;\r\n      }\r\n\r\n      //Customize the style of the menu here\r\n      padding: 8px 0;\r\n      box-shadow: 0px 5px 7px 1px var(--mx-menu-shadow-color);\r\n      border: 1px solid var(--mx-menu-border-color);\r\n\r\n      //Customize the style of the menu item\r\n      .mx-context-menu-item {\r\n        border-radius: 5px;\r\n        margin: 0 6px;\r\n        padding: 3px 6px;\r\n      }\r\n    }\r\n   * ```\r\n   */\r\n  theme\t?: string;\r\n  /**\r\n   * If your element in menu item has this className, click it will ignore event.\r\n   */\r\n  ignoreClickClassName?: string,\r\n  /**\r\n   * Set should close menu when the user click on other places.\r\n   *\r\n   * @default true\r\n   */\r\n  clickCloseOnOutside ?: boolean;\r\n  /**\r\n   * If your element in menu item has this className, click it will ignore event and close hole menu.\r\n   */\r\n  clickCloseClassName?: string,\r\n  /**\r\n   * Custom icon library font class name. (global)\r\n   *\r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass ?:\tstring;\r\n  /**\r\n   * The Vue Transition props used when menu show or hide.\r\n   * @default undefined\r\n   */\r\n  menuTransitionProps ?: TransitionProps;\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (global)\r\n   *\r\n   * Default is true.\r\n   *\r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth ?: boolean;\r\n  /**\r\n   * Set whether the user can use keyboard keys to control the current menu.\r\n   *\r\n   * Default: true\r\n   *\r\n   * The control logic is consistent with the Windows right-click menu:\r\n   * * Escape : Close current menu\r\n   * * Enter : Click current menu item\r\n   * * ArrowDown : Select the down menu item\r\n   * * ArrowUp : Select the up menu item\r\n   * * ArrowLeft : Back previous submenu\r\n   * * ArrowRight : Open current menu item submenu\r\n   * * Home : Select the first menu item\r\n   * * End : Select the last menu item\r\n   */\r\n  keyboardControl ?: boolean;\r\n  /**\r\n   * Maximum width of main menu (in pixels)\r\n   */\r\n  maxWidth ?: number;\r\n  /**\r\n   * Minimum width of main menu (pixels)\r\n   */\r\n  minWidth ?: number;\r\n  /**\r\n   * Close when user scroll mouse ? Default is true.\r\n   */\r\n  closeWhenScroll ?: boolean;\r\n  /**\r\n   * Padding for submenu position adjust. Default is `{ x：0, y: 10 }`.\r\n   */\r\n  adjustPadding?: { x: number, y: number }|number,\r\n  /**\r\n   * By default, the menu will automatically adjust its position to prevent it overflow the container.\r\n   *\r\n   * If you allow menu overflow containers, you can set this to false.\r\n   *\r\n   * Default is true.\r\n   */\r\n  adjustPosition?: boolean,\r\n  /**\r\n   * Return the mounted node for MenuRoot.\r\n   *\r\n   * Note: After you change the mount node, the menu display position may be incorrect.\r\n   *\r\n   * * The MenuOptions.x is the distance from the menu to the left edge of the container (container should `position: relative;`);\r\n   * * The MenuOptions.y is the distance from the menu to the top edge of the container (container should `position: relative;`);;\r\n   *\r\n   * So, you need to change the x and y values you passed in to ensure that the display position is correct.\r\n   *\r\n   * You may need to use `ContextMenu.transformMenuPosition` to transform the menu display position:\r\n   *\r\n   * ```\r\n   * function onContextMenu(e: MouseEvent) {\r\n      //MyContainerElement is the MenuRoot\r\n      const scaledPosition = ContextMenu.transformMenuPosition(e.target as HTMLElement, e.offsetX, e.offsetY, MyContainerElement);\r\n      menuData.x = scaledPosition.x;\r\n      menuData.y = scaledPosition.y;\r\n      //show menu\r\n      ContextMenu.showContextMenu(menuData);\r\n    }\r\n   * ```\r\n   */\r\n  getContainer ?: HTMLElement | (() => HTMLElement);\r\n\r\n  /**\r\n   * This event emit when this menu is closing. (Usually used in function mode)\r\n   * @param lastClickItem The last clicked menu item, if user does not click any item, it is `undefined`. This param only valid in function mode.\r\n   */\r\n  onClose ?: ((lastClickItem: MenuItem|undefined) => void) | undefined;\r\n  /**\r\n   * When `clickCloseOnOutside` is set to `false`, and user click on other places will emit this event.\r\n   */\r\n  onClickOnOutside ?: (e: MouseEvent) => void;\r\n  /**\r\n   * Event for MenuBar component\r\n   */\r\n  onKeyFocusMoveLeft ?:  (() => void) | undefined;\r\n  /**\r\n   * Event for MenuBar component\r\n   */\r\n  onKeyFocusMoveRight ?:  (() => void) | undefined;\r\n}\r\nexport interface MenuItem {\r\n  /**\r\n   * The label of this menu item.\r\n   *\r\n   * Can be a callback. Use `h` to render custom content.\r\n   *\r\n   * ```js\r\n   * {\r\n   *   label: h('div', {\r\n   *     style: {\r\n   *       fontSize: '20px',\r\n   *       color: '#f98',\r\n   *     }\r\n   *   }, \"Item with custom render\"),\r\n   * },\r\n   * ```\r\n   */\r\n  label ?: string|VNode|((label: string) => VNode),\r\n  /**\r\n   * The icon for this menu item.\r\n   */\r\n  icon ?: string|VNode|((icon: string) => VNode),\r\n  /**\r\n   * Custom icon library font class name.\r\n   *\r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass ?: string,\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n   *\r\n   * Default is inherit from `MenuOptions.preserveIconWidth` .\r\n   *\r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth ?: boolean;\r\n  /**\r\n   * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n   */\r\n  svgIcon ?: string,\r\n  /**\r\n   * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n   */\r\n  svgProps ?: SVGAttributes,\r\n  /**\r\n   * Disable menu item?\r\n   */\r\n  disabled ?: boolean,\r\n  /**\r\n   * Hide menu item?\r\n   */\r\n  hidden ?: boolean,\r\n  /**\r\n   * Is this menu item checked?\r\n   *\r\n   * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n   */\r\n  checked ?: boolean,\r\n  /**\r\n   * Shortcut key text display on the right.\r\n   *\r\n   * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n   */\r\n  shortcut ?: string|string,\r\n  /**\r\n   * Set the submenu pop-up direction relative to coordinates.\r\n   *\r\n   * Default is inherted from `MenuOptions.direction`, if `adjustSubMenuPosition` is true then the submenu will determine\r\n   * the pop-up direction based on its distance from the screen edge.\r\n   *\r\n   */\r\n  direction ?: MenuPopDirection,\r\n  /**\r\n   * By default, the submenu will automatically adjust its position to prevent it overflow the container.\r\n   *\r\n   * If you allow menu overflow containers, you can set this to false.\r\n   *\r\n   * Default is inherit from `MenuOptions.adjustPosition`.\r\n   */\r\n  adjustSubMenuPosition ?: boolean,\r\n  /**\r\n   * When there are subitems in this item, is it allowed to trigger its own click event? Default is false\r\n   */\r\n  clickableWhenHasChildren ?: boolean,\r\n  /**\r\n   * Should close menu when Click this menu item ?\r\n   */\r\n  clickClose ?: boolean,\r\n  /**\r\n   * Is this menu item separated from the menu item?\r\n   *\r\n   * * `true` or `'down'`: Separator is show below menu.\r\n   * * `'up'`: Separator is show above menu.\r\n   * * `'self'`: Mark this item is a Separator.\r\n   * * `false`: No Separator.\r\n   */\r\n  divided ?: boolean|'up'|'down'|'self',\r\n  /**\r\n   * Custom css class for submenu\r\n   */\r\n  customClass ?: string,\r\n  /**\r\n   * Submenu maximum width (in pixels).\r\n   */\r\n  maxWidth ?: number|string,\r\n  /**\r\n   * Submenu minimum width (in pixels).\r\n   */\r\n  minWidth ?: number|string,\r\n  /**\r\n   * Menu item click event handler.\r\n   *\r\n   * @param e The current event of `click` or `keydown` (when user use keyboard press this menu)\r\n   */\r\n  onClick ?: (e?: MouseEvent|KeyboardEvent) => void,\r\n  /**\r\n   * This event emit when submenu of this item is closing.\r\n   */\r\n  onSubMenuClose ?: ((itemInstance: MenuItemContext) => void) | undefined;\r\n  /**\r\n   * This event emit when submenu of this item is showing.\r\n   */\r\n  onSubMenuOpen ?: ((itemInstance: MenuItemContext) => void) | undefined;\r\n  /**\r\n   * A custom render callback that allows you to customize the rendering\r\n   *  of the current item.\r\n   */\r\n  customRender ?: VNode|((item: MenuItem) => VNode),\r\n  /**\r\n   * Child menu items (Valid in function mode).\r\n   */\r\n  children ?: MenuChildren,\r\n}\r\n\r\nexport interface ContextMenuPositionData {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport declare interface MenuItemRenderData extends Omit<MenuItem, 'children'|'customRender'|'onClick'> {\r\n  /**\r\n   * Global theme\r\n   */\r\n  theme: 'light'|'dark',\r\n  /**\r\n   * This value indicates whether the current menu submenu is open\r\n   */\r\n  isOpen: boolean,\r\n  /**\r\n   * This value indicates whether the current menu has submenus\r\n   */\r\n  hasChildren: boolean,\r\n  /**\r\n   * Click event callback of custom element, which is used for menu internal event\r\n   */\r\n  onClick: (e: MouseEvent) => void,\r\n  /**\r\n   * MouseEnter event callback of custom element, which is used for menu internal event\r\n   */\r\n  onMouseEnter: (e: MouseEvent) => void,\r\n}\r\n", "import { defineComponent, toRefs } from \"vue\";\r\nimport type { VNode } from \"vue\";\r\nimport type { MenuOptions } from \"./ContextMenuDefine\";\r\nimport { MenuConstOptions } from \"./ContextMenuDefine\";\r\n\r\n/**\r\n * Get absolute y position of HTMLElement\r\n * @param e Element\r\n * @param stopNode Specify the node for recursive termination, default to body\r\n * @returns \r\n */\r\nexport function getTop(e: HTMLElement, stopNode?: HTMLElement): number {\r\n  let offset = e.offsetTop;\r\n  if (e.offsetParent != null && e.offsetParent != stopNode) {\r\n    offset -= e.offsetParent.scrollTop;\r\n    offset += getTop(e.offsetParent as HTMLElement, stopNode);\r\n  }\r\n  return offset;\r\n}\r\n/**\r\n * Get absolute x position of HTMLElement\r\n * @param e Element\r\n * @param stopNode Specify the node for recursive termination, default to body\r\n * @returns \r\n */\r\nexport function getLeft(e: HTMLElement, stopNode?: HTMLElement): number {\r\n  let offset = e.offsetLeft;\r\n  if (e.offsetParent != null && e.offsetParent != stopNode) {\r\n    offset -= e.offsetParent.scrollLeft;\r\n    offset += getLeft(e.offsetParent as HTMLElement, stopNode);\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * If your `body` element is in a scaled state (e.g. `transform: scale(0.5)`), \r\n * this may lead to the wrong position of the menu display. \r\n * You can use this function to transform the menu display position:\r\n * \r\n * ```ts\r\n * \r\n  import ContextMenu from '@imengyu/vue3-context-menu'\r\n\r\n  function onContextMenu(e: MouseEvent) {\r\n    const scaledPosition = ContextMenu.transformMenuPosition(e.target as HTMLElement, e.offsetX, e.offsetY);\r\n    //Full code of menuData is in `/examples/views/InScaledBody.vue`\r\n    menuData.x = scaledPosition.x;\r\n    menuData.y = scaledPosition.y;\r\n    //show menu\r\n    ContextMenu.showContextMenu(menuData);\r\n  }\r\n  * ```\r\n  * @param e Current click element\r\n  * @param offsetX MouseEvent.offsetX\r\n  * @param offsetY MouseEvent.offsetY\r\n  */\r\nexport function transformMenuPosition(e: HTMLElement, offsetX: number, offsetY: number, container?: HTMLElement): {\r\n  x: number,\r\n  y: number,\r\n} {\r\n  return {\r\n    x: getLeft(e, container) + offsetX,\r\n    y: getTop(e, container) + offsetY,\r\n  };\r\n}\r\n\r\nconst DEFAULT_CONTAINER_ID = 'mx-menu-default-container';\r\nconst GEN_CONTAINER_ID = 'mx-menu-container-';\r\nlet containerId = 0;\r\n\r\nexport function removeContainer(container: HTMLElement) : void {\r\n  container.parentNode?.removeChild(container);\r\n}\r\nexport function genContainer(options: MenuOptions) : {\r\n  eleId: string,\r\n  container: HTMLElement,\r\n  isNew: boolean,\r\n} {\r\n  const { getContainer, zIndex } = options;\r\n\r\n  if (getContainer) {\r\n    const container = typeof getContainer === 'function' ? getContainer() : getContainer;\r\n    if (container) {\r\n      let eleId = container.getAttribute('id');\r\n      if (!eleId) {\r\n        eleId = GEN_CONTAINER_ID + (containerId++);\r\n        container.setAttribute('id', eleId);\r\n      }\r\n      return {\r\n        eleId,\r\n        container,\r\n        isNew: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let container = document.getElementById(DEFAULT_CONTAINER_ID);\r\n  if (!container) {\r\n    container = document.createElement('div');\r\n    container.setAttribute('id', DEFAULT_CONTAINER_ID);\r\n    container.setAttribute('class', 'mx-menu-ghost-host fullscreen');\r\n    document.body.appendChild(container);\r\n  }\r\n  container.style.zIndex = zIndex?.toString() || MenuConstOptions.defaultZindex.toString();\r\n  return {\r\n    eleId: DEFAULT_CONTAINER_ID,\r\n    container,\r\n    isNew: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Number to px string\r\n * @param value \r\n * @returns \r\n */\r\nexport function solveNumberOrStringSize(value: string|number) : string {\r\n  return typeof value === 'number' ? `${value}px` : value;\r\n}\r\n\r\n/**\r\n * Render a VNode\r\n */\r\nexport const VNodeRender = defineComponent({\r\n  props: {\r\n    /**\r\n     * Can be VNode or (data: unknown) => VNode\r\n     */\r\n    vnode: {\r\n      type: null,\r\n    },\r\n    /**\r\n     * If vnode is a callback, this data will be passed to the callback first parameter.\r\n     * @default null\r\n     */\r\n    data: {\r\n      type: null,\r\n      default: null,\r\n    },\r\n  },\r\n  setup(props) {\r\n    const { vnode, data } = toRefs(props);\r\n    return () => typeof vnode.value === 'function' ? (vnode.value as unknown as (data: unknown) => VNode)(data.value) : vnode.value as unknown as VNode;\r\n  },\r\n})", "<template>\r\n  <svg class=\"mx-checked-mark\" aria-hidden=\"true\" viewBox=\"0 0 1024 1024\">\r\n    <path d=\"M129.3,428.6L52,512l345,372.5l575-620.8l-69.5-75L400.4,718.2L129.3,428.6z\"></path>\r\n  </svg>\r\n</template>", "<template>\r\n  <svg class=\"mx-right-arrow\" aria-hidden=\"true\" viewBox=\"0 0 1024 1024\">\r\n    <path d=\"M307.018 49.445c11.517 0 23.032 4.394 31.819 13.18L756.404 480.18c8.439 8.438 13.181 19.885 13.181 31.82s-4.741 23.38-13.181 31.82L338.838 961.376c-17.574 17.573-46.065 17.573-63.64-0.001-17.573-17.573-17.573-46.065 0.001-63.64L660.944 512 275.198 126.265c-17.574-17.573-17.574-46.066-0.001-63.64C283.985 53.839 295.501 49.445 307.018 49.445z\"></path>\r\n  </svg>\r\n</template>", "<template>\r\n  <div v-if=\"!hidden\" class=\"mx-context-menu-item-wrapper\" ref=\"menuItemRef\" data-type=\"ContextMenuItem\">\r\n    <!--Custom render-->\r\n    <VNodeRender v-if=\"globalHasSlot('itemRender')\" :vnode=\"() => globalRenderSlot('itemRender', getItemDataForChildren())\" />\r\n    <VNodeRender v-else-if=\"customRender\" :vnode=\"customRender\" :data=\"getItemDataForChildren()\" />\r\n    <!--Default item-->\r\n    <div \r\n      v-else\r\n      :class=\"[\r\n        'mx-context-menu-item',\r\n        (disabled ? 'disabled' : ''),\r\n        (keyBoardFocusMenu ? 'keyboard-focus' : ''),\r\n        (customClass ? (' ' + customClass) : ''),\r\n        (showSubMenu ? 'open' : ''),\r\n      ]\"\r\n      @click=\"onClick\"\r\n      @mouseenter=\"onMouseEnter\"\r\n    >\r\n      <slot>\r\n        <div class=\"mx-item-row\">\r\n          <div :class=\"[\r\n            'mx-icon-placeholder',\r\n            preserveIconWidth ? 'preserve-width': '',\r\n          ]\">\r\n            <slot name=\"icon\">\r\n              <VNodeRender v-if=\"globalHasSlot('itemIconRender')\" :vnode=\"() => globalRenderSlot('itemIconRender', getItemDataForChildren())\" />\r\n              <svg v-else-if=\"typeof svgIcon === 'string' && svgIcon\" class=\"icon svg\" v-bind=\"svgProps\">\r\n                <use :xlink:href=\"svgIcon\"></use>\r\n              </svg>\r\n              <VNodeRender v-else-if=\"(typeof icon !== 'string')\" :vnode=\"icon\" :data=\"icon\" />\r\n              <i v-else-if=\"typeof icon === 'string' && icon !== ''\" :class=\"icon + ' icon '+ iconFontClass + ' ' + options.iconFontClass\"></i>\r\n            </slot>\r\n            <slot v-if=\"checked\" name=\"check\">\r\n              <VNodeRender v-if=\"globalHasSlot('itemCheckRender')\" :vnode=\"() => globalRenderSlot('itemCheckRender', getItemDataForChildren())\" />\r\n              <ContextMenuIconCheck />\r\n            </slot>\r\n          </div>\r\n          <slot name=\"label\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemLabelRender')\" :vnode=\"() => globalRenderSlot('itemLabelRender', getItemDataForChildren())\" />\r\n            <span class=\"label\" v-else-if=\"typeof label === 'string'\">{{ label }}</span>\r\n            <VNodeRender v-else :vnode=\"label\" :data=\"label\" />\r\n          </slot>\r\n        </div>\r\n        <div class=\"mx-item-row\">\r\n          <slot v-if=\"shortcut\" name=\"shortcut\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemShortcutRender')\" :vnode=\"() => globalRenderSlot('itemShortcutRender', getItemDataForChildren())\" />\r\n            <span class=\"mx-shortcut\">{{ shortcut }}</span>\r\n          </slot>\r\n          <slot v-if=\"showRightArrow\" name=\"rightArrow\">\r\n            <VNodeRender v-if=\"globalHasSlot('itemRightArrowRender')\" :vnode=\"() => globalRenderSlot('itemRightArrowRender', getItemDataForChildren())\" />\r\n            <ContextMenuIconRight />\r\n          </slot>\r\n        </div>\r\n      </slot>\r\n    </div>\r\n    \r\n    <!--Sub menu render-->\r\n    <Transition v-if=\"options.menuTransitionProps\" v-bind=\"options.menuTransitionProps\">\r\n      <slot v-if=\"showSubMenu\" name=\"submenu\"></slot>\r\n    </Transition>\r\n    <slot v-else-if=\"showSubMenu\" name=\"submenu\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { inject, nextTick, onBeforeUnmount, onMounted, type PropType, ref, type SVGAttributes, toRefs, type TransitionProps, type Ref, computed, provide } from 'vue'\r\nimport type { SubMenuParentContext } from './ContextSubMenu.vue'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport type { MenuItem, MenuItemContext, MenuOptions } from './ContextMenuDefine'\r\nimport { VNodeRender } from './ContextMenuUtils'\r\nimport ContextMenuIconCheck from './ContextMenuIconCheck.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n/**\r\n * Menu Item\r\n */\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Is this menu disabled? \r\n   */\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Is this menu hidden? \r\n   */\r\n  hidden: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  customRender: {\r\n    type: Function,\r\n    default: null\r\n  },\r\n  /**\r\n   * Custom css class for submenu\r\n   */\r\n  customClass: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  clickHandler: {\r\n    type: Function as PropType<(e: MouseEvent|KeyboardEvent) => void>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Menu label\r\n   */\r\n  label: {\r\n    type: [String, Object, Function],\r\n    default: ''\r\n  },\r\n  /**\r\n   * Menu icon (for icon class)\r\n   */\r\n  icon: {\r\n    type: [String, Object, Function],\r\n    default: ''\r\n  },\r\n  /**\r\n   * Custom icon library font class name.\r\n   * \r\n   * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n   */\r\n  iconFontClass: {\r\n    type: String,\r\n    default: 'iconfont'\r\n  },\r\n  /**\r\n   * Is this menu item checked?\r\n   * \r\n   * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n   */\r\n  checked: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Shortcut key text display on the right.\r\n   * \r\n   * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n   */\r\n  shortcut: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  /**\r\n   * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n   */\r\n  svgIcon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  /**\r\n   * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n   */\r\n  svgProps: {\r\n    type: Object as PropType<SVGAttributes>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n   * \r\n   * Default is true .\r\n   * \r\n   * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n   */\r\n  preserveIconWidth: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  /**\r\n   * Show right arrow on this menu?\r\n   */\r\n  showRightArrow: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  hasChildren: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  /**\r\n   * Should close menu when Click this menu item ?\r\n   */\r\n  clickClose: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  /**\r\n   * When there are subitems in this item, is it allowed to trigger its own click event? Default is false\r\n   */\r\n  clickableWhenHasChildren: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  rawMenuItem: {\r\n    type: Object as PropType<MenuItem>,\r\n    default: undefined\r\n  },\r\n});\r\nconst emit = defineEmits([\r\n  'click',\r\n  'subMenuOpen',\r\n  'subMenuClose',\r\n])\r\n\r\nconst { \r\n  clickHandler, clickClose, clickableWhenHasChildren, disabled, hidden,\r\n  label, icon, iconFontClass,\r\n  showRightArrow, shortcut,\r\n  hasChildren,\r\n} = toRefs(props);\r\nconst showSubMenu = ref(false);\r\nconst keyBoardFocusMenu = ref(false);\r\n\r\nconst menuItemRef = ref<HTMLElement>();\r\n\r\nconst options = inject('globalOptions') as Ref<MenuOptions>;\r\nconst globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\nconst globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\nconst globalCloseMenu = inject('globalCloseMenu') as (fromItem: MenuItem|undefined) => void;\r\n\r\nconst menuContext = inject('menuContext') as SubMenuParentContext;\r\n\r\n//Instance Contet for keyboadr control\r\nconst menuItemInstance : MenuItemContext = {\r\n  getSubMenuInstance: () => undefined,\r\n  showSubMenu: () => {\r\n    if (showSubMenu.value) {\r\n      //Mark current item\r\n      menuContext.markActiveMenuItem(menuItemInstance, true);\r\n      return true;\r\n    } else if (hasChildren.value) {\r\n      onMouseEnter();\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  hideSubMenu: () => {\r\n    //closeSubMenu();\r\n    menuContext.closeOtherSubMenu();\r\n  },\r\n  isDisabledOrHidden: () => disabled.value || hidden.value,\r\n  getElement: () => menuItemRef.value,\r\n  focus: () => keyBoardFocusMenu.value = true,\r\n  blur: () => keyBoardFocusMenu.value = false,\r\n  click: onClick,\r\n}\r\n\r\nprovide(\"menuItemInstance\", menuItemInstance);\r\n\r\nonMounted(() => {\r\n  if (menuContext.isMenuItemDataCollectedFlag()) {\r\n    //当前菜单条目是在整体加载完成后才显示的，此时菜单顺序已经无法知道，\r\n    //所以这里需要在父级元素中查找得出当前菜单的位置。\r\n    //\r\n    //The current menu item is displayed after the overall loading is completed. \r\n    //At this time, the menu order cannot be known, so here we need to \r\n    //find the position of the current menu in the parent element.\r\n    nextTick(() => {\r\n      let index = 0;\r\n      const parentEl = menuContext.getElement();\r\n      if (parentEl) {\r\n        let indexCounting = 0;\r\n        for (let i = 0; i < parentEl.children.length; i++) {\r\n          const el = parentEl.children[i];\r\n          if (el.getAttribute('data-type') === 'ContextMenuItem') {\r\n            if (el === menuItemRef.value) {\r\n              index = indexCounting;\r\n              break;\r\n            }\r\n            indexCounting++;\r\n          }\r\n        }\r\n      }\r\n      //Insert to pos\r\n      menuContext.addChildMenuItem(menuItemInstance, index);\r\n    });\r\n  } else\r\n    menuContext.addChildMenuItem(menuItemInstance);\r\n});\r\nonBeforeUnmount(() => {\r\n  menuContext.removeChildMenuItem(menuItemInstance);\r\n});\r\n\r\n//Click handler\r\nfunction onClick(e: MouseEvent|KeyboardEvent) {\r\n  //Ignore clicking when disabled\r\n  if (disabled.value)\r\n    return;\r\n  //Ignore clicking when click on some special elements\r\n  if (e) {\r\n    const currentTarget = e.target as HTMLElement;\r\n    if (currentTarget.classList.contains('mx-context-no-clickable'))\r\n      return;\r\n    if (options.value.ignoreClickClassName && currentTarget.classList.contains(options.value.ignoreClickClassName))\r\n      return;\r\n    if (options.value.clickCloseClassName && currentTarget.classList.contains(options.value.clickCloseClassName)) {\r\n      e.stopPropagation();\r\n      globalCloseMenu(props.rawMenuItem);\r\n      return;\r\n    }\r\n  }\r\n  //Has submenu?\r\n  if (hasChildren.value) {\r\n    if (clickableWhenHasChildren.value) {\r\n      if (typeof clickHandler.value === 'function')\r\n        clickHandler.value(e);\r\n      emit('click', e);\r\n    }\r\n    else if (!showSubMenu.value)\r\n      onMouseEnter();\r\n  } else {\r\n    //Call hander from options\r\n    if (typeof clickHandler.value === 'function') \r\n      clickHandler.value(e);\r\n    emit('click', e);\r\n    if (clickClose.value) {\r\n      //emit close\r\n      globalCloseMenu(props.rawMenuItem);\r\n    }\r\n  }\r\n}\r\n//MouseEnter handler: show item submenu\r\nfunction onMouseEnter(e?: MouseEvent) {\r\n  //Clear keyBoard focus style\r\n  keyBoardFocusMenu.value = false;\r\n\r\n  //等待一个延时，以防止用户过快移动鼠标导致菜单隐藏\r\n  //Wait for a delay to prevent the menu from being hidden due to the user moving the mouse too fast\r\n  if (!menuContext.checkCloseOtherSubMenuTimeOut())\r\n    menuContext.closeOtherSubMenu();\r\n\r\n  if (!disabled.value) {\r\n    //Mark current item\r\n    menuContext.markActiveMenuItem(menuItemInstance);\r\n\r\n    if (hasChildren.value) {\r\n      if (!e)\r\n        menuContext.markThisOpenedByKeyBoard();\r\n      //Open sub menu\r\n      menuContext.addOpenedSubMenu(closeSubMenu);\r\n      showSubMenu.value = true;\r\n      nextTick(() => emit('subMenuOpen', menuItemInstance));\r\n    }\r\n  }\r\n}\r\nfunction closeSubMenu() \r\n{\r\n  keyBoardFocusMenu.value = false;\r\n  showSubMenu.value = false;\r\n  emit('subMenuClose', menuItemInstance);\r\n}\r\n//Data for custom render\r\nfunction getItemDataForChildren() {\r\n  return {\r\n    disabled: disabled.value,\r\n    label: label.value,\r\n    icon: icon.value,\r\n    iconFontClass: iconFontClass.value,\r\n    showRightArrow: showRightArrow.value,\r\n    clickClose: clickClose.value,\r\n    clickableWhenHasChildren: clickableWhenHasChildren.value,\r\n    shortcut: shortcut.value,\r\n    theme: options.value.theme,\r\n    isOpen: showSubMenu,\r\n    hasChildren: hasChildren,\r\n    onClick,\r\n    onMouseEnter,\r\n    closeMenu: globalCloseMenu,\r\n  }\r\n}\r\n\r\ndefineExpose(menuItemInstance);\r\n</script>\r\n\r\n<style>\r\n</style>\r\n", "<template>\r\n  <VNodeRender v-if=\"globalHasSlot('separatorRender')\" :vnode=\"() => globalRenderSlot('separatorRender', {})\" />\r\n  <div v-else class=\"mx-context-menu-item-sperator mx-context-no-clickable\"></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject } from 'vue'\r\nimport { VNodeRender } from './ContextMenuUtils';\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextSubMenuWrapper.vue';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuSperator',\r\n  components: {\r\n    VNodeRender\r\n  },\r\n  setup() {\r\n      \r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    return {\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n    };\r\n  },\r\n})\r\n</script>", "<template>\r\n  <VNodeRender v-if=\"globalHasSlot('separatorRender')\" :vnode=\"() => globalRenderSlot('separatorRender', {})\" />\r\n  <div v-else class=\"mx-context-menu-item-sperator mx-context-no-clickable\"></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject } from 'vue'\r\nimport { VNodeRender } from './ContextMenuUtils';\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextSubMenuWrapper.vue';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuSperator',\r\n  components: {\r\n    VNodeRender\r\n  },\r\n  setup() {\r\n      \r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    return {\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n    };\r\n  },\r\n})\r\n</script>", "<template>\r\n  <div\r\n    ref=\"submenuRoot\"\r\n    :class=\"[\r\n      'mx-context-menu',\r\n      (options.customClass ? options.customClass : ''),\r\n      (options.theme ?? '')\r\n    ]\"\r\n    :style=\"{\r\n      maxWidth: (maxWidth ? solveNumberOrStringSize(maxWidth) : `${constOptions.defaultMaxWidth}px`),\r\n      minWidth: minWidth ? solveNumberOrStringSize(minWidth) : `${constOptions.defaultMinWidth}px`,\r\n      maxHeight: overflow && maxHeight > 0 ? `${maxHeight}px` : undefined,\r\n      zIndex: zIndex,\r\n      left: `${position.x}px`,\r\n      top: `${position.y}px`,\r\n    }\"\r\n    data-type=\"ContextSubMenu\"\r\n    @click=\"onSubMenuBodyClick\"\r\n    @wheel=\"onMouseWhell\"\r\n  >\r\n    <!--Child menu items-->\r\n    <div\r\n      :class=\"[ 'mx-context-menu-items' ]\"\r\n      ref=\"menu\"\r\n      :style=\"{\r\n        top: `${scrollValue}px`,\r\n      }\"\r\n    >\r\n      <slot>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n        <template v-for=\"(item, i) in items\" :key=\"i\" >\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'up'\" />\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'self'\" />\r\n          <!--Menu Item-->\r\n          <ContextMenuItem\r\n            v-else\r\n            :clickHandler=\"item.onClick ? (e) => item.onClick!(e) : undefined\"\r\n            :disabled=\"item.disabled\"\r\n            :hidden=\"item.hidden\"\r\n            :icon=\"item.icon\"\r\n            :iconFontClass=\"item.iconFontClass\"\r\n            :svgIcon=\"item.svgIcon\"\r\n            :svgProps=\"item.svgProps\"\r\n            :label=\"item.label\"\r\n            :customRender=\"(item.customRender as Function)\"\r\n            :customClass=\"item.customClass\"\r\n            :checked=\"item.checked\"\r\n            :shortcut=\"item.shortcut\"\r\n            :clickClose=\"item.clickClose\"\r\n            :clickableWhenHasChildren=\"item.clickableWhenHasChildren\"\r\n            :preserveIconWidth=\"item.preserveIconWidth !== undefined ? item.preserveIconWidth : options.preserveIconWidth\"\r\n            :showRightArrow=\"item.children && item.children.length > 0\"\r\n            :hasChildren=\"item.children && item.children.length > 0\"\r\n            :rawMenuItem=\"item\"\r\n            @sub-menu-open=\"(v: any) => item.onSubMenuOpen?.(v)\"\r\n            @sub-menu-close=\"(v: any) => item.onSubMenuClose?.(v)\"\r\n          >\r\n            <template v-if=\"item.children && item.children.length > 0\" #submenu>\r\n              <!--Sub menu-->\r\n              <ContextSubMenu\r\n                :items=\"item.children\"\r\n                :maxWidth=\"item.maxWidth\"\r\n                :minWidth=\"item.minWidth\"\r\n                :adjustPosition=\"item.adjustSubMenuPosition !== undefined ? item.adjustSubMenuPosition : options.adjustPosition\"\r\n                :direction=\"item.direction !== undefined ? item.direction : options.direction\"\r\n              />\r\n            </template>\r\n          </ContextMenuItem>\r\n          <!--Separator-->\r\n          <!--Custom render-->\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && (item.divided === 'down' || item.divided === true)\" />\r\n        </template>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n      </slot>\r\n    </div>\r\n\r\n    <!--Scroll button host-->\r\n    <div\r\n      class=\"mx-context-menu-scroll\"\r\n      ref=\"scroll\"\r\n    >\r\n      <!--Updown scroll button-->\r\n      <div\r\n        v-show=\"overflow\"\r\n        ref=\"upScrollButton\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable up' + (overflow && scrollValue < 0 ? '' : ' disabled')\"\r\n        @click=\"onScroll(false)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n      <div\r\n        v-show=\"overflow\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable down' + (overflow && scrollValue > -scrollHeight ? '' : ' disabled')\"\r\n        @click=\"onScroll(true)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject, nextTick, onMounted, type PropType, provide, ref, toRefs, type Ref, onBeforeUnmount } from 'vue'\r\nimport type { MenuOptions, MenuItem, ContextMenuPositionData, MenuPopDirection, MenuItemContext, ContextSubMenuInstance } from './ContextMenuDefine'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { getLeft, getTop, solveNumberOrStringSize } from './ContextMenuUtils'\r\nimport ContextMenuItem from './ContextMenuItem.vue'\r\nimport ContextMenuSeparator from './ContextMenuSeparator.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n\r\n//The internal info context for submenu instance\r\nexport interface SubMenuContext {\r\n  isTopLevel: () => boolean;\r\n  closeSelfAndActiveParent: () => boolean,\r\n  openCurrentItemSubMenu: () => boolean,\r\n  closeCurrentSubMenu: () => void,\r\n  moveCurrentItemFirst: () => void,\r\n  moveCurrentItemLast: () => void,\r\n  moveCurrentItemDown: () => void,\r\n  moveCurrentItemUp: () => void,\r\n  focusCurrentItem: () => void,\r\n  triggerCurrentItemClick: (e: KeyboardEvent|MouseEvent) => void,\r\n}\r\n\r\n//The internal info context for submenu\r\nexport interface SubMenuParentContext {\r\n  //Props\r\n  container: HTMLElement;\r\n  zIndex: number;\r\n  adjustPadding: { x: number, y: number },\r\n\r\n  //Position control\r\n  getParentWidth: () => number;\r\n  getParentHeight: () => number;\r\n  getParentX: () => number;\r\n  getParentY: () => number;\r\n  getParentAbsX: () => number;\r\n  getParentAbsY: () => number;\r\n  getPositon: () => [number,number];\r\n  getZoom: () => number;\r\n\r\n  //SubMenu mutex\r\n  addOpenedSubMenu: (closeFn: () => void) => void;\r\n  closeOtherSubMenu: () => void;\r\n  closeOtherSubMenuWithTimeOut: () => void;\r\n  checkCloseOtherSubMenuTimeOut: () => boolean;\r\n\r\n  //Item control\r\n  addChildMenuItem: (item: MenuItemContext, index?: number) => void;\r\n  removeChildMenuItem: (item: MenuItemContext) => void;\r\n  markActiveMenuItem: (item: MenuItemContext, updateState?: boolean) => void;\r\n  markThisOpenedByKeyBoard: () => void;\r\n  isOpenedByKeyBoardFlag: () => boolean;\r\n  isMenuItemDataCollectedFlag: () => boolean;\r\n\r\n  //Other\r\n  getSubMenuInstanceContext: () => SubMenuContext|null;\r\n  getParentContext: () => SubMenuParentContext|null;\r\n  getElement: () => HTMLElement|null;\r\n}\r\n\r\n/**\r\n * Submenu container\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextSubMenu',\r\n  components: {\r\n    ContextMenuItem,\r\n    ContextMenuSeparator,\r\n    ContextMenuIconRight\r\n  },\r\n  props: {\r\n    /**\r\n     * Items from options\r\n     */\r\n    items: {\r\n      type: Object as PropType<Array<MenuItem>>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Max width for this submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width for this submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Specifies should submenu adjust it position\r\n     * when the menu exceeds the screen. The default is true\r\n     */\r\n    adjustPosition: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Menu direction\r\n     */\r\n    direction: {\r\n      type: String as PropType<MenuPopDirection>,\r\n      default: 'br',\r\n    },\r\n  },\r\n  setup(props) {\r\n\r\n    //#region Injects\r\n\r\n    const parentContext = inject('menuContext') as SubMenuParentContext;\r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    //#endregion\r\n\r\n    const { zIndex, getParentWidth, getParentHeight, getZoom } = parentContext;\r\n    const { adjustPosition } = toRefs(props);\r\n\r\n    const submenuRoot = ref<HTMLElement>();\r\n    const menu = ref<HTMLElement>();\r\n    const scroll = ref<HTMLElement>();\r\n    const upScrollButton = ref<HTMLElement>();\r\n    const openedSubMenuClose = [] as (() => void)[];\r\n\r\n    //#region Keyboard control context\r\n\r\n    const globalSetCurrentSubMenu = inject('globalSetCurrentSubMenu') as (menu: SubMenuContext|null) => void;\r\n\r\n    const menuItems = [] as MenuItemContext[];\r\n    let currentItem = null as MenuItemContext|null;\r\n    let leaveTimeout = 0;\r\n\r\n    function blurCurrentMenu() {\r\n      if (currentItem)\r\n        currentItem.blur();\r\n    }\r\n\r\n    function setAndFocusNotDisableItem(isDown: boolean, startIndex?: number) {\r\n      if (isDown) {\r\n        for(let i = startIndex !== undefined ? startIndex : 0; i < menuItems.length; i++) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for(let i = startIndex !== undefined ? startIndex : (menuItems.length - 1); i >= 0; i--) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    function setAndFocusCurrentMenu(index?: number) {\r\n      if (currentItem)\r\n        blurCurrentMenu();\r\n      if (index !== undefined)\r\n        currentItem = menuItems[Math.max(0, Math.min(index, menuItems.length - 1))];\r\n      if (!currentItem)\r\n        return;\r\n\r\n      //Focus item\r\n      currentItem.focus();\r\n\r\n      //Scroll to current item\r\n      if (overflow.value) {\r\n        const element = currentItem.getElement();\r\n        if (element) {\r\n          scrollValue.value = Math.min(Math.max(-scrollHeight.value, -element.offsetTop - element.offsetHeight + maxHeight.value), 0);\r\n        }\r\n      }\r\n    }\r\n    function onSubMenuBodyClick() {\r\n      //Mouse click can set current focused submenu\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n    }\r\n\r\n    const thisMenuInsContext : SubMenuContext = {\r\n      isTopLevel: () => parentContext.getParentContext() === null,\r\n      closeSelfAndActiveParent: () => {\r\n        const parent = thisMenuContext.getParentContext();\r\n        if (parent) {\r\n          parent.closeOtherSubMenu();\r\n          const conext = parent.getSubMenuInstanceContext()\r\n          if (conext) {\r\n            conext.focusCurrentItem();\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      closeCurrentSubMenu: () => thisMenuContext.getParentContext()?.closeOtherSubMenu(),\r\n      moveCurrentItemFirst: () => setAndFocusNotDisableItem(true),\r\n      moveCurrentItemLast: () => setAndFocusNotDisableItem(false),\r\n      moveCurrentItemDown: () => setAndFocusNotDisableItem(true, (currentItem ? (menuItems.indexOf(currentItem) + 1) : 0)),\r\n      moveCurrentItemUp: () => setAndFocusNotDisableItem(false, (currentItem ? (menuItems.indexOf(currentItem) - 1) : 0)),\r\n      focusCurrentItem: () => setAndFocusCurrentMenu(),\r\n      openCurrentItemSubMenu: () => {\r\n        if (currentItem)\r\n          return currentItem?.showSubMenu()\r\n        return false;\r\n      },\r\n      triggerCurrentItemClick: (e) => currentItem?.click(e),\r\n    };\r\n\r\n    let isOpenedByKeyBoardFlag = false;\r\n    let isMenuItemDataCollectedFlag = false;\r\n\r\n    //#endregion\r\n\r\n    //#region Menu control context\r\n\r\n    //provide menuContext for child use\r\n    const thisMenuContext : SubMenuParentContext = {\r\n      zIndex: zIndex + 1,\r\n      container: parentContext.container,\r\n      adjustPadding: options.value.adjustPadding as { x: number, y: number } || MenuConstOptions.defaultAdjustPadding,\r\n      getParentWidth: () => menu.value?.offsetWidth || 0,\r\n      getParentHeight: () => menu.value?.offsetHeight || 0,\r\n      getParentX: () => position.value.x,\r\n      getParentY: () => position.value.y,\r\n      getParentAbsX: () => menu.value ? getLeft(menu.value, parentContext.container) : 0,\r\n      getParentAbsY: () => menu.value ? getTop(menu.value, parentContext.container) : 0,\r\n      getPositon: () => [0,0],\r\n      getZoom: () => options.value.zoom||MenuConstOptions.defaultZoom,\r\n      addOpenedSubMenu(closeFn: () => void) {\r\n        openedSubMenuClose.push(closeFn);\r\n      },\r\n      closeOtherSubMenu() {\r\n        openedSubMenuClose.forEach(k => k());\r\n        openedSubMenuClose.splice(0, openedSubMenuClose.length);\r\n        globalSetCurrentSubMenu(thisMenuInsContext);\r\n      },\r\n      checkCloseOtherSubMenuTimeOut() {\r\n        if (leaveTimeout) {\r\n          clearTimeout(leaveTimeout);\r\n          leaveTimeout = 0;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      closeOtherSubMenuWithTimeOut() {\r\n        leaveTimeout = setTimeout(() => {\r\n          leaveTimeout = 0;\r\n          this.closeOtherSubMenu();\r\n        }, 200) as unknown as number; //Add a delay, the user will not hide the menu when moving too fast\r\n      },\r\n      addChildMenuItem: (item: MenuItemContext, index?: number) => {\r\n        if (index === undefined)\r\n          menuItems.push(item);\r\n        else\r\n          menuItems.splice(index, 0, item);\r\n        //item.getSubMenuInstance = () => {\r\n        //  return subMenuRefs.value[menuItems.indexOf(item)]?.value;\r\n        //}\r\n      },\r\n      removeChildMenuItem: (item: MenuItemContext) => {\r\n        menuItems.splice(menuItems.indexOf(item), 1);\r\n        item.getSubMenuInstance = () => undefined;\r\n      },\r\n      markActiveMenuItem: (item: MenuItemContext, updateState = false) => {\r\n        blurCurrentMenu();\r\n        currentItem = item;\r\n        if (updateState)\r\n          setAndFocusCurrentMenu();\r\n      },\r\n      markThisOpenedByKeyBoard: () => {\r\n        isOpenedByKeyBoardFlag = true;\r\n      },\r\n      isOpenedByKeyBoardFlag: () => {\r\n        if (isOpenedByKeyBoardFlag) {\r\n          isOpenedByKeyBoardFlag = false;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      isMenuItemDataCollectedFlag: () => isMenuItemDataCollectedFlag,\r\n      getElement: () => menu.value || null,\r\n      getParentContext: () => parentContext,\r\n      getSubMenuInstanceContext: () => thisMenuInsContext,\r\n    };\r\n    provide('menuContext', thisMenuContext);\r\n\r\n    //#endregion\r\n\r\n    //#region expose user use context\r\n\r\n    const exposeContext : ContextSubMenuInstance = {\r\n      getChildItem: (index: number) => menuItems[index],\r\n      getMenuDimensions: () => {\r\n        if (submenuRoot.value) {\r\n          return {\r\n            width: submenuRoot.value.offsetWidth,\r\n            height: submenuRoot.value.offsetHeight,\r\n          };\r\n        }\r\n        return { width: 0, height: 0 };\r\n      },\r\n      getSubmenuRoot: () => submenuRoot.value,\r\n      getMenu: () => menu.value,\r\n      getScrollValue: () => scrollValue.value,\r\n      setScrollValue: (v: number) => scrollValue.value = v,\r\n      getScrollHeight: () => scrollHeight.value,\r\n      getMaxHeight: () => maxHeight.value,\r\n      getPosition: () => position.value,\r\n      setPosition: (x: number, y: number) => { \r\n        position.value.x = x;\r\n        position.value.y = y;\r\n      },\r\n    };\r\n    \r\n    //#endregion\r\n\r\n    //#region set parent item context\r\n\r\n    const menuItemInstance = inject<MenuItemContext|undefined>('menuItemInstance', undefined);\r\n    if (menuItemInstance)\r\n      menuItemInstance.getSubMenuInstance = () => exposeContext;\r\n\r\n    //#endregion\r\n\r\n    const scrollValue = ref(0);\r\n    const scrollHeight = ref(0);\r\n\r\n    //Scroll the items\r\n    function onScroll(down : boolean) {\r\n      if (down)\r\n        scrollValue.value = Math.min(Math.max(scrollValue.value - 50, -scrollHeight.value), 0);\r\n      else\r\n        scrollValue.value = Math.min(scrollValue.value + 50, 0);\r\n    }\r\n\r\n    function onMouseWhellMx(e: WheelEvent) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      onScroll (e.deltaY > 0);\r\n    }\r\n    function onMouseWhell(e: WheelEvent) {\r\n      if (options.value.mouseScroll) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onScroll (e.deltaY > 0);\r\n      }\r\n    }\r\n\r\n    const overflow = ref(false);\r\n    const position = ref({ x: 0, y: 0 } as ContextMenuPositionData)\r\n    const maxHeight = ref(0);\r\n\r\n    onMounted(() => {\r\n      const pos = parentContext.getPositon();\r\n      position.value = {\r\n        x: (pos[0] ?? options.value.xOffset ?? 0) / getZoom(),\r\n        y: (pos[1] ?? options.value.yOffset ?? 0) / getZoom(),\r\n      };\r\n\r\n      //Mark current item submenu is open\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n\r\n      nextTick(() => {\r\n        const menuEl = menu.value;\r\n\r\n        //adjust submenu position\r\n        if (menuEl && scroll.value) {\r\n\r\n          const { container } = parentContext;\r\n\r\n          const parentWidth = getParentWidth?.() ?? 0;\r\n          const parentHeight = getParentHeight?.() ?? 0;\r\n\r\n          const fillPaddingX = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.x ?? 0);\r\n          const fillPaddingYAlways = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.y ?? 0);\r\n          const fillPaddingY = parentHeight > 0 ? fillPaddingYAlways : 0;\r\n\r\n          const windowHeight = document.documentElement.scrollHeight / getZoom();\r\n          const windowWidth = document.documentElement.scrollWidth / getZoom();\r\n\r\n          const avliableWidth = Math.min(windowWidth, container.offsetWidth);\r\n          const avliableHeight = Math.min(windowHeight, container.offsetHeight);\r\n\r\n          let absX = getLeft(menuEl, container),\r\n            absY = getTop(menuEl, container);\r\n\r\n          //set x positon\r\n          if (props.direction.includes('l')) {\r\n            position.value.x -= menuEl.offsetWidth + fillPaddingX; //left\r\n          }\r\n          else if (props.direction.includes('r')) {\r\n            position.value.x += parentWidth + fillPaddingX; //right\r\n          }\r\n          else {\r\n            position.value.x += parentWidth / 2;\r\n            position.value.x -= (menuEl.offsetWidth + fillPaddingX) / 2; //center\r\n          }\r\n\r\n          //set y positon\r\n          if (props.direction.includes('t')) {\r\n            position.value.y -= (menuEl.offsetHeight + fillPaddingYAlways * 2) / getZoom(); //top\r\n          }\r\n          else if (props.direction.includes('b')) {\r\n            position.value.y -= fillPaddingYAlways / getZoom();  //bottom\r\n          }\r\n          else {\r\n            position.value.y += (parentHeight / 2) / getZoom();\r\n            position.value.y -= ((menuEl.offsetHeight + fillPaddingYAlways) / 2) / getZoom(); //center\r\n          }\r\n\r\n          //Overflow adjust\r\n          if (adjustPosition.value) {\r\n            nextTick(() => {\r\n              absX = getLeft(menuEl, container);\r\n              absY = getTop(menuEl, container);\r\n\r\n              const xOverflow = (absX + menuEl.offsetWidth) - (avliableWidth);\r\n              const yOverflow = (absY + menuEl.offsetHeight + fillPaddingY * 2) - (avliableHeight);\r\n\r\n              overflow.value = yOverflow > 0;\r\n              scrollHeight.value = menuEl.offsetHeight - avliableHeight + fillPaddingY * 2 /* Padding */;\r\n\r\n              if (xOverflow > 0) {//X overflow\r\n                const ox = parentWidth + menuEl.offsetWidth - fillPaddingX;\r\n                const maxSubWidth = absX;\r\n                if (ox > maxSubWidth)\r\n                  position.value.x -= maxSubWidth;\r\n                else\r\n                  position.value.x -= ox;\r\n              }\r\n\r\n              if (overflow.value) { //Y overflow\r\n                const oy = yOverflow;\r\n                const maxSubHeight = absY;\r\n                if (oy > maxSubHeight)\r\n                  position.value.y -= maxSubHeight - fillPaddingY;\r\n                else\r\n                  position.value.y -= oy - fillPaddingY;\r\n                maxHeight.value = (avliableHeight - fillPaddingY * 2);\r\n              } else {\r\n                maxHeight.value = 0;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        //Focus this submenu\r\n        menuEl?.focus({\r\n          preventScroll: true\r\n        });\r\n\r\n        //Is this submenu opened by keyboard? If yes then select first item\r\n        if (parentContext.isOpenedByKeyBoardFlag())\r\n          setAndFocusNotDisableItem(true);\r\n\r\n        isMenuItemDataCollectedFlag = true;\r\n      });\r\n    });\r\n    onBeforeUnmount(() => {\r\n      if (menuItemInstance)\r\n        menuItemInstance.getSubMenuInstance = () => undefined;\r\n    });\r\n\r\n    return {\r\n      submenuRoot,\r\n      menu,\r\n      scroll,\r\n      options,\r\n      zIndex,\r\n      constOptions: MenuConstOptions,\r\n      scrollValue,\r\n      upScrollButton,\r\n      overflow,\r\n      position,\r\n      scrollHeight,\r\n      maxHeight,\r\n      ...exposeContext,\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n      onScroll,\r\n      onSubMenuBodyClick,\r\n      onMouseWhell,\r\n      onMouseWhellMx,\r\n      solveNumberOrStringSize,\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"./ContextMenu.scss\";\r\n</style>\r\n", "<template>\r\n  <div\r\n    ref=\"submenuRoot\"\r\n    :class=\"[\r\n      'mx-context-menu',\r\n      (options.customClass ? options.customClass : ''),\r\n      (options.theme ?? '')\r\n    ]\"\r\n    :style=\"{\r\n      maxWidth: (maxWidth ? solveNumberOrStringSize(maxWidth) : `${constOptions.defaultMaxWidth}px`),\r\n      minWidth: minWidth ? solveNumberOrStringSize(minWidth) : `${constOptions.defaultMinWidth}px`,\r\n      maxHeight: overflow && maxHeight > 0 ? `${maxHeight}px` : undefined,\r\n      zIndex: zIndex,\r\n      left: `${position.x}px`,\r\n      top: `${position.y}px`,\r\n    }\"\r\n    data-type=\"ContextSubMenu\"\r\n    @click=\"onSubMenuBodyClick\"\r\n    @wheel=\"onMouseWhell\"\r\n  >\r\n    <!--Child menu items-->\r\n    <div\r\n      :class=\"[ 'mx-context-menu-items' ]\"\r\n      ref=\"menu\"\r\n      :style=\"{\r\n        top: `${scrollValue}px`,\r\n      }\"\r\n    >\r\n      <slot>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n        <template v-for=\"(item, i) in items\" :key=\"i\" >\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'up'\" />\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && item.divided === 'self'\" />\r\n          <!--Menu Item-->\r\n          <ContextMenuItem\r\n            v-else\r\n            :clickHandler=\"item.onClick ? (e) => item.onClick!(e) : undefined\"\r\n            :disabled=\"item.disabled\"\r\n            :hidden=\"item.hidden\"\r\n            :icon=\"item.icon\"\r\n            :iconFontClass=\"item.iconFontClass\"\r\n            :svgIcon=\"item.svgIcon\"\r\n            :svgProps=\"item.svgProps\"\r\n            :label=\"item.label\"\r\n            :customRender=\"(item.customRender as Function)\"\r\n            :customClass=\"item.customClass\"\r\n            :checked=\"item.checked\"\r\n            :shortcut=\"item.shortcut\"\r\n            :clickClose=\"item.clickClose\"\r\n            :clickableWhenHasChildren=\"item.clickableWhenHasChildren\"\r\n            :preserveIconWidth=\"item.preserveIconWidth !== undefined ? item.preserveIconWidth : options.preserveIconWidth\"\r\n            :showRightArrow=\"item.children && item.children.length > 0\"\r\n            :hasChildren=\"item.children && item.children.length > 0\"\r\n            :rawMenuItem=\"item\"\r\n            @sub-menu-open=\"(v: any) => item.onSubMenuOpen?.(v)\"\r\n            @sub-menu-close=\"(v: any) => item.onSubMenuClose?.(v)\"\r\n          >\r\n            <template v-if=\"item.children && item.children.length > 0\" #submenu>\r\n              <!--Sub menu-->\r\n              <ContextSubMenu\r\n                :items=\"item.children\"\r\n                :maxWidth=\"item.maxWidth\"\r\n                :minWidth=\"item.minWidth\"\r\n                :adjustPosition=\"item.adjustSubMenuPosition !== undefined ? item.adjustSubMenuPosition : options.adjustPosition\"\r\n                :direction=\"item.direction !== undefined ? item.direction : options.direction\"\r\n              />\r\n            </template>\r\n          </ContextMenuItem>\r\n          <!--Separator-->\r\n          <!--Custom render-->\r\n          <ContextMenuSeparator v-if=\"item.hidden !== true && (item.divided === 'down' || item.divided === true)\" />\r\n        </template>\r\n        <div v-if=\"overflow && options.updownButtonSpaceholder\" class=\"mx-context-menu-updown placeholder\"></div>\r\n      </slot>\r\n    </div>\r\n\r\n    <!--Scroll button host-->\r\n    <div\r\n      class=\"mx-context-menu-scroll\"\r\n      ref=\"scroll\"\r\n    >\r\n      <!--Updown scroll button-->\r\n      <div\r\n        v-show=\"overflow\"\r\n        ref=\"upScrollButton\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable up' + (overflow && scrollValue < 0 ? '' : ' disabled')\"\r\n        @click=\"onScroll(false)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n      <div\r\n        v-show=\"overflow\"\r\n        :class=\"'mx-context-menu-updown mx-context-no-clickable down' + (overflow && scrollValue > -scrollHeight ? '' : ' disabled')\"\r\n        @click=\"onScroll(true)\"\r\n        @wheel=\"onMouseWhellMx\"\r\n      >\r\n        <ContextMenuIconRight />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, inject, nextTick, onMounted, type PropType, provide, ref, toRefs, type Ref, onBeforeUnmount } from 'vue'\r\nimport type { MenuOptions, MenuItem, ContextMenuPositionData, MenuPopDirection, MenuItemContext, ContextSubMenuInstance } from './ContextMenuDefine'\r\nimport type { GlobalHasSlot, GlobalRenderSlot } from './ContextMenu.vue'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { getLeft, getTop, solveNumberOrStringSize } from './ContextMenuUtils'\r\nimport ContextMenuItem from './ContextMenuItem.vue'\r\nimport ContextMenuSeparator from './ContextMenuSeparator.vue'\r\nimport ContextMenuIconRight from './ContextMenuIconRight.vue'\r\n\r\n\r\n//The internal info context for submenu instance\r\nexport interface SubMenuContext {\r\n  isTopLevel: () => boolean;\r\n  closeSelfAndActiveParent: () => boolean,\r\n  openCurrentItemSubMenu: () => boolean,\r\n  closeCurrentSubMenu: () => void,\r\n  moveCurrentItemFirst: () => void,\r\n  moveCurrentItemLast: () => void,\r\n  moveCurrentItemDown: () => void,\r\n  moveCurrentItemUp: () => void,\r\n  focusCurrentItem: () => void,\r\n  triggerCurrentItemClick: (e: KeyboardEvent|MouseEvent) => void,\r\n}\r\n\r\n//The internal info context for submenu\r\nexport interface SubMenuParentContext {\r\n  //Props\r\n  container: HTMLElement;\r\n  zIndex: number;\r\n  adjustPadding: { x: number, y: number },\r\n\r\n  //Position control\r\n  getParentWidth: () => number;\r\n  getParentHeight: () => number;\r\n  getParentX: () => number;\r\n  getParentY: () => number;\r\n  getParentAbsX: () => number;\r\n  getParentAbsY: () => number;\r\n  getPositon: () => [number,number];\r\n  getZoom: () => number;\r\n\r\n  //SubMenu mutex\r\n  addOpenedSubMenu: (closeFn: () => void) => void;\r\n  closeOtherSubMenu: () => void;\r\n  closeOtherSubMenuWithTimeOut: () => void;\r\n  checkCloseOtherSubMenuTimeOut: () => boolean;\r\n\r\n  //Item control\r\n  addChildMenuItem: (item: MenuItemContext, index?: number) => void;\r\n  removeChildMenuItem: (item: MenuItemContext) => void;\r\n  markActiveMenuItem: (item: MenuItemContext, updateState?: boolean) => void;\r\n  markThisOpenedByKeyBoard: () => void;\r\n  isOpenedByKeyBoardFlag: () => boolean;\r\n  isMenuItemDataCollectedFlag: () => boolean;\r\n\r\n  //Other\r\n  getSubMenuInstanceContext: () => SubMenuContext|null;\r\n  getParentContext: () => SubMenuParentContext|null;\r\n  getElement: () => HTMLElement|null;\r\n}\r\n\r\n/**\r\n * Submenu container\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextSubMenu',\r\n  components: {\r\n    ContextMenuItem,\r\n    ContextMenuSeparator,\r\n    ContextMenuIconRight\r\n  },\r\n  props: {\r\n    /**\r\n     * Items from options\r\n     */\r\n    items: {\r\n      type: Object as PropType<Array<MenuItem>>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Max width for this submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width for this submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Specifies should submenu adjust it position\r\n     * when the menu exceeds the screen. The default is true\r\n     */\r\n    adjustPosition: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Menu direction\r\n     */\r\n    direction: {\r\n      type: String as PropType<MenuPopDirection>,\r\n      default: 'br',\r\n    },\r\n  },\r\n  setup(props) {\r\n\r\n    //#region Injects\r\n\r\n    const parentContext = inject('menuContext') as SubMenuParentContext;\r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const globalHasSlot = inject('globalHasSlot') as GlobalHasSlot;\r\n    const globalRenderSlot = inject('globalRenderSlot') as GlobalRenderSlot;\r\n\r\n    //#endregion\r\n\r\n    const { zIndex, getParentWidth, getParentHeight, getZoom } = parentContext;\r\n    const { adjustPosition } = toRefs(props);\r\n\r\n    const submenuRoot = ref<HTMLElement>();\r\n    const menu = ref<HTMLElement>();\r\n    const scroll = ref<HTMLElement>();\r\n    const upScrollButton = ref<HTMLElement>();\r\n    const openedSubMenuClose = [] as (() => void)[];\r\n\r\n    //#region Keyboard control context\r\n\r\n    const globalSetCurrentSubMenu = inject('globalSetCurrentSubMenu') as (menu: SubMenuContext|null) => void;\r\n\r\n    const menuItems = [] as MenuItemContext[];\r\n    let currentItem = null as MenuItemContext|null;\r\n    let leaveTimeout = 0;\r\n\r\n    function blurCurrentMenu() {\r\n      if (currentItem)\r\n        currentItem.blur();\r\n    }\r\n\r\n    function setAndFocusNotDisableItem(isDown: boolean, startIndex?: number) {\r\n      if (isDown) {\r\n        for(let i = startIndex !== undefined ? startIndex : 0; i < menuItems.length; i++) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for(let i = startIndex !== undefined ? startIndex : (menuItems.length - 1); i >= 0; i--) {\r\n          if (!menuItems[i].isDisabledOrHidden()) {\r\n            setAndFocusCurrentMenu(i);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    function setAndFocusCurrentMenu(index?: number) {\r\n      if (currentItem)\r\n        blurCurrentMenu();\r\n      if (index !== undefined)\r\n        currentItem = menuItems[Math.max(0, Math.min(index, menuItems.length - 1))];\r\n      if (!currentItem)\r\n        return;\r\n\r\n      //Focus item\r\n      currentItem.focus();\r\n\r\n      //Scroll to current item\r\n      if (overflow.value) {\r\n        const element = currentItem.getElement();\r\n        if (element) {\r\n          scrollValue.value = Math.min(Math.max(-scrollHeight.value, -element.offsetTop - element.offsetHeight + maxHeight.value), 0);\r\n        }\r\n      }\r\n    }\r\n    function onSubMenuBodyClick() {\r\n      //Mouse click can set current focused submenu\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n    }\r\n\r\n    const thisMenuInsContext : SubMenuContext = {\r\n      isTopLevel: () => parentContext.getParentContext() === null,\r\n      closeSelfAndActiveParent: () => {\r\n        const parent = thisMenuContext.getParentContext();\r\n        if (parent) {\r\n          parent.closeOtherSubMenu();\r\n          const conext = parent.getSubMenuInstanceContext()\r\n          if (conext) {\r\n            conext.focusCurrentItem();\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      closeCurrentSubMenu: () => thisMenuContext.getParentContext()?.closeOtherSubMenu(),\r\n      moveCurrentItemFirst: () => setAndFocusNotDisableItem(true),\r\n      moveCurrentItemLast: () => setAndFocusNotDisableItem(false),\r\n      moveCurrentItemDown: () => setAndFocusNotDisableItem(true, (currentItem ? (menuItems.indexOf(currentItem) + 1) : 0)),\r\n      moveCurrentItemUp: () => setAndFocusNotDisableItem(false, (currentItem ? (menuItems.indexOf(currentItem) - 1) : 0)),\r\n      focusCurrentItem: () => setAndFocusCurrentMenu(),\r\n      openCurrentItemSubMenu: () => {\r\n        if (currentItem)\r\n          return currentItem?.showSubMenu()\r\n        return false;\r\n      },\r\n      triggerCurrentItemClick: (e) => currentItem?.click(e),\r\n    };\r\n\r\n    let isOpenedByKeyBoardFlag = false;\r\n    let isMenuItemDataCollectedFlag = false;\r\n\r\n    //#endregion\r\n\r\n    //#region Menu control context\r\n\r\n    //provide menuContext for child use\r\n    const thisMenuContext : SubMenuParentContext = {\r\n      zIndex: zIndex + 1,\r\n      container: parentContext.container,\r\n      adjustPadding: options.value.adjustPadding as { x: number, y: number } || MenuConstOptions.defaultAdjustPadding,\r\n      getParentWidth: () => menu.value?.offsetWidth || 0,\r\n      getParentHeight: () => menu.value?.offsetHeight || 0,\r\n      getParentX: () => position.value.x,\r\n      getParentY: () => position.value.y,\r\n      getParentAbsX: () => menu.value ? getLeft(menu.value, parentContext.container) : 0,\r\n      getParentAbsY: () => menu.value ? getTop(menu.value, parentContext.container) : 0,\r\n      getPositon: () => [0,0],\r\n      getZoom: () => options.value.zoom||MenuConstOptions.defaultZoom,\r\n      addOpenedSubMenu(closeFn: () => void) {\r\n        openedSubMenuClose.push(closeFn);\r\n      },\r\n      closeOtherSubMenu() {\r\n        openedSubMenuClose.forEach(k => k());\r\n        openedSubMenuClose.splice(0, openedSubMenuClose.length);\r\n        globalSetCurrentSubMenu(thisMenuInsContext);\r\n      },\r\n      checkCloseOtherSubMenuTimeOut() {\r\n        if (leaveTimeout) {\r\n          clearTimeout(leaveTimeout);\r\n          leaveTimeout = 0;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      closeOtherSubMenuWithTimeOut() {\r\n        leaveTimeout = setTimeout(() => {\r\n          leaveTimeout = 0;\r\n          this.closeOtherSubMenu();\r\n        }, 200) as unknown as number; //Add a delay, the user will not hide the menu when moving too fast\r\n      },\r\n      addChildMenuItem: (item: MenuItemContext, index?: number) => {\r\n        if (index === undefined)\r\n          menuItems.push(item);\r\n        else\r\n          menuItems.splice(index, 0, item);\r\n        //item.getSubMenuInstance = () => {\r\n        //  return subMenuRefs.value[menuItems.indexOf(item)]?.value;\r\n        //}\r\n      },\r\n      removeChildMenuItem: (item: MenuItemContext) => {\r\n        menuItems.splice(menuItems.indexOf(item), 1);\r\n        item.getSubMenuInstance = () => undefined;\r\n      },\r\n      markActiveMenuItem: (item: MenuItemContext, updateState = false) => {\r\n        blurCurrentMenu();\r\n        currentItem = item;\r\n        if (updateState)\r\n          setAndFocusCurrentMenu();\r\n      },\r\n      markThisOpenedByKeyBoard: () => {\r\n        isOpenedByKeyBoardFlag = true;\r\n      },\r\n      isOpenedByKeyBoardFlag: () => {\r\n        if (isOpenedByKeyBoardFlag) {\r\n          isOpenedByKeyBoardFlag = false;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      isMenuItemDataCollectedFlag: () => isMenuItemDataCollectedFlag,\r\n      getElement: () => menu.value || null,\r\n      getParentContext: () => parentContext,\r\n      getSubMenuInstanceContext: () => thisMenuInsContext,\r\n    };\r\n    provide('menuContext', thisMenuContext);\r\n\r\n    //#endregion\r\n\r\n    //#region expose user use context\r\n\r\n    const exposeContext : ContextSubMenuInstance = {\r\n      getChildItem: (index: number) => menuItems[index],\r\n      getMenuDimensions: () => {\r\n        if (submenuRoot.value) {\r\n          return {\r\n            width: submenuRoot.value.offsetWidth,\r\n            height: submenuRoot.value.offsetHeight,\r\n          };\r\n        }\r\n        return { width: 0, height: 0 };\r\n      },\r\n      getSubmenuRoot: () => submenuRoot.value,\r\n      getMenu: () => menu.value,\r\n      getScrollValue: () => scrollValue.value,\r\n      setScrollValue: (v: number) => scrollValue.value = v,\r\n      getScrollHeight: () => scrollHeight.value,\r\n      getMaxHeight: () => maxHeight.value,\r\n      getPosition: () => position.value,\r\n      setPosition: (x: number, y: number) => { \r\n        position.value.x = x;\r\n        position.value.y = y;\r\n      },\r\n    };\r\n    \r\n    //#endregion\r\n\r\n    //#region set parent item context\r\n\r\n    const menuItemInstance = inject<MenuItemContext|undefined>('menuItemInstance', undefined);\r\n    if (menuItemInstance)\r\n      menuItemInstance.getSubMenuInstance = () => exposeContext;\r\n\r\n    //#endregion\r\n\r\n    const scrollValue = ref(0);\r\n    const scrollHeight = ref(0);\r\n\r\n    //Scroll the items\r\n    function onScroll(down : boolean) {\r\n      if (down)\r\n        scrollValue.value = Math.min(Math.max(scrollValue.value - 50, -scrollHeight.value), 0);\r\n      else\r\n        scrollValue.value = Math.min(scrollValue.value + 50, 0);\r\n    }\r\n\r\n    function onMouseWhellMx(e: WheelEvent) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      onScroll (e.deltaY > 0);\r\n    }\r\n    function onMouseWhell(e: WheelEvent) {\r\n      if (options.value.mouseScroll) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onScroll (e.deltaY > 0);\r\n      }\r\n    }\r\n\r\n    const overflow = ref(false);\r\n    const position = ref({ x: 0, y: 0 } as ContextMenuPositionData)\r\n    const maxHeight = ref(0);\r\n\r\n    onMounted(() => {\r\n      const pos = parentContext.getPositon();\r\n      position.value = {\r\n        x: (pos[0] ?? options.value.xOffset ?? 0) / getZoom(),\r\n        y: (pos[1] ?? options.value.yOffset ?? 0) / getZoom(),\r\n      };\r\n\r\n      //Mark current item submenu is open\r\n      globalSetCurrentSubMenu(thisMenuInsContext);\r\n\r\n      nextTick(() => {\r\n        const menuEl = menu.value;\r\n\r\n        //adjust submenu position\r\n        if (menuEl && scroll.value) {\r\n\r\n          const { container } = parentContext;\r\n\r\n          const parentWidth = getParentWidth?.() ?? 0;\r\n          const parentHeight = getParentHeight?.() ?? 0;\r\n\r\n          const fillPaddingX = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.x ?? 0);\r\n          const fillPaddingYAlways = typeof parentContext.adjustPadding === 'number' ? parentContext.adjustPadding : (parentContext.adjustPadding?.y ?? 0);\r\n          const fillPaddingY = parentHeight > 0 ? fillPaddingYAlways : 0;\r\n\r\n          const windowHeight = document.documentElement.scrollHeight / getZoom();\r\n          const windowWidth = document.documentElement.scrollWidth / getZoom();\r\n\r\n          const avliableWidth = Math.min(windowWidth, container.offsetWidth);\r\n          const avliableHeight = Math.min(windowHeight, container.offsetHeight);\r\n\r\n          let absX = getLeft(menuEl, container),\r\n            absY = getTop(menuEl, container);\r\n\r\n          //set x positon\r\n          if (props.direction.includes('l')) {\r\n            position.value.x -= menuEl.offsetWidth + fillPaddingX; //left\r\n          }\r\n          else if (props.direction.includes('r')) {\r\n            position.value.x += parentWidth + fillPaddingX; //right\r\n          }\r\n          else {\r\n            position.value.x += parentWidth / 2;\r\n            position.value.x -= (menuEl.offsetWidth + fillPaddingX) / 2; //center\r\n          }\r\n\r\n          //set y positon\r\n          if (props.direction.includes('t')) {\r\n            position.value.y -= (menuEl.offsetHeight + fillPaddingYAlways * 2) / getZoom(); //top\r\n          }\r\n          else if (props.direction.includes('b')) {\r\n            position.value.y -= fillPaddingYAlways / getZoom();  //bottom\r\n          }\r\n          else {\r\n            position.value.y += (parentHeight / 2) / getZoom();\r\n            position.value.y -= ((menuEl.offsetHeight + fillPaddingYAlways) / 2) / getZoom(); //center\r\n          }\r\n\r\n          //Overflow adjust\r\n          if (adjustPosition.value) {\r\n            nextTick(() => {\r\n              absX = getLeft(menuEl, container);\r\n              absY = getTop(menuEl, container);\r\n\r\n              const xOverflow = (absX + menuEl.offsetWidth) - (avliableWidth);\r\n              const yOverflow = (absY + menuEl.offsetHeight + fillPaddingY * 2) - (avliableHeight);\r\n\r\n              overflow.value = yOverflow > 0;\r\n              scrollHeight.value = menuEl.offsetHeight - avliableHeight + fillPaddingY * 2 /* Padding */;\r\n\r\n              if (xOverflow > 0) {//X overflow\r\n                const ox = parentWidth + menuEl.offsetWidth - fillPaddingX;\r\n                const maxSubWidth = absX;\r\n                if (ox > maxSubWidth)\r\n                  position.value.x -= maxSubWidth;\r\n                else\r\n                  position.value.x -= ox;\r\n              }\r\n\r\n              if (overflow.value) { //Y overflow\r\n                const oy = yOverflow;\r\n                const maxSubHeight = absY;\r\n                if (oy > maxSubHeight)\r\n                  position.value.y -= maxSubHeight - fillPaddingY;\r\n                else\r\n                  position.value.y -= oy - fillPaddingY;\r\n                maxHeight.value = (avliableHeight - fillPaddingY * 2);\r\n              } else {\r\n                maxHeight.value = 0;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        //Focus this submenu\r\n        menuEl?.focus({\r\n          preventScroll: true\r\n        });\r\n\r\n        //Is this submenu opened by keyboard? If yes then select first item\r\n        if (parentContext.isOpenedByKeyBoardFlag())\r\n          setAndFocusNotDisableItem(true);\r\n\r\n        isMenuItemDataCollectedFlag = true;\r\n      });\r\n    });\r\n    onBeforeUnmount(() => {\r\n      if (menuItemInstance)\r\n        menuItemInstance.getSubMenuInstance = () => undefined;\r\n    });\r\n\r\n    return {\r\n      submenuRoot,\r\n      menu,\r\n      scroll,\r\n      options,\r\n      zIndex,\r\n      constOptions: MenuConstOptions,\r\n      scrollValue,\r\n      upScrollButton,\r\n      overflow,\r\n      position,\r\n      scrollHeight,\r\n      maxHeight,\r\n      ...exposeContext,\r\n      globalHasSlot,\r\n      globalRenderSlot,\r\n      onScroll,\r\n      onSubMenuBodyClick,\r\n      onMouseWhell,\r\n      onMouseWhellMx,\r\n      solveNumberOrStringSize,\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"./ContextMenu.scss\";\r\n</style>\r\n", "<template>\r\n  <div class=\"mx-menu-ghost-host\">\r\n    <Transition\r\n      v-if=\"options.menuTransitionProps\"\r\n      appear\r\n      v-bind=\"options.menuTransitionProps\"\r\n      @after-leave=\"emit('closeAnimFinished')\"\r\n    >\r\n      <ContextSubMenuConstructor\r\n        v-if=\"show\"\r\n        ref=\"submenuInstance\"\r\n        class=\"mx-menu-host\"\r\n        :items=\"options.items\"\r\n        :adjustPosition=\"options.adjustPosition\"\r\n        :maxWidth=\"options.maxWidth || MenuConstOptions.defaultMaxWidth\"\r\n        :minWidth=\"options.minWidth || MenuConstOptions.defaultMinWidth\"\r\n        :direction=\"(options.direction || MenuConstOptions.defaultDirection as MenuPopDirection)\"\r\n      >\r\n        <slot />\r\n      </ContextSubMenuConstructor>\r\n    </Transition>\r\n    <ContextSubMenuConstructor\r\n      v-else-if=\"show\"\r\n      ref=\"submenuInstance\"\r\n      class=\"mx-menu-host\"\r\n      :items=\"options.items\"\r\n      :adjustPosition=\"options.adjustPosition\"\r\n      :maxWidth=\"options.maxWidth || MenuConstOptions.defaultMaxWidth\"\r\n      :minWidth=\"options.minWidth || MenuConstOptions.defaultMinWidth\"\r\n      :direction=\"(options.direction || MenuConstOptions.defaultDirection as MenuPopDirection)\"\r\n    >\r\n      <slot />\r\n    </ContextSubMenuConstructor>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { h, onBeforeUnmount, onMounted, type PropType, provide, ref, renderSlot, toRefs, type VNode, watch, Transition, useSlots, type Ref } from 'vue'\r\nimport type { ContextMenuInstance, ContextSubMenuInstance, MenuItem, MenuOptions, MenuPopDirection } from './ContextMenuDefine'\r\nimport { MenuConstOptions } from './ContextMenuDefine'\r\nimport { addOpenedContextMenu, removeOpenedContextMenu } from './ContextMenuMutex';\r\nimport ContextSubMenuConstructor, { type SubMenuContext, type SubMenuParentContext } from './ContextSubMenu.vue';\r\n\r\n/**\r\n * Context menu component\r\n */\r\n\r\nexport type GlobalHasSlot = (name: string) => boolean;\r\nexport type GlobalRenderSlot = (name: string, params: Record<string, unknown>) => VNode;\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Menu options\r\n   */\r\n  options: {\r\n    type: Object as PropType<MenuOptions>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Show menu?\r\n   */\r\n  show: {\r\n    type: Object as PropType<Ref<boolean>>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Current container, For calculation only\r\n   */\r\n  container: {\r\n    type: Object as PropType<HTMLElement>,\r\n    default: null\r\n  },\r\n  /**\r\n   * Make sure is user set the custom container.\r\n   */\r\n  isFullScreenContainer: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n});\r\n\r\nconst emit = defineEmits([ 'close', 'closeAnimFinished' ]);\r\n\r\nconst slots = useSlots()\r\n\r\nconst submenuInstance = ref<ContextSubMenuInstance>();\r\n\r\nconst {\r\n  options,\r\n  show,\r\n  container,\r\n} = toRefs(props);\r\n\r\nonMounted(() => {\r\n  if (show.value)\r\n    openMenu();\r\n})\r\nonBeforeUnmount(() => {\r\n  removeBodyEvents();\r\n});\r\n\r\nwatch(show, (v: boolean) => {\r\n  if(v) {\r\n    openMenu();\r\n  } else {\r\n    removeOpenedContextMenu(instance);\r\n    removeBodyEvents();\r\n  }\r\n});\r\n\r\nconst instance : ContextMenuInstance = {\r\n  closeMenu,\r\n  isClosed,\r\n  getMenuRef: () => submenuInstance.value,\r\n  getMenuDimensions: () => submenuInstance.value?.getMenuDimensions() ?? { width: 0, height: 0 },\r\n};\r\nlet closed = false;\r\n\r\nfunction openMenu() {\r\n  installBodyEvents();\r\n  addOpenedContextMenu(instance);\r\n}\r\nfunction closeMenu(fromItem?: MenuItem|undefined) {\r\n  closed = true;\r\n  emit(\"close\", fromItem);\r\n  if (!options.value.menuTransitionProps)\r\n    emit('closeAnimFinished');\r\n  removeOpenedContextMenu(instance);\r\n}\r\nfunction isClosed() {\r\n  return closed;\r\n}\r\n\r\n\r\nfunction installBodyEvents() {\r\n  setTimeout(() => {\r\n    document.addEventListener(\"click\", onBodyClick, true);\r\n    document.addEventListener(\"contextmenu\", onBodyClick, true);\r\n    document.addEventListener(\"scroll\", onBodyScroll, true);\r\n    if (!props.isFullScreenContainer && container.value)\r\n      container.value.addEventListener(\"scroll\", onBodyScroll, true);\r\n    if (options.value.keyboardControl !== false)\r\n      document.addEventListener('keydown', onMenuKeyDown);\r\n  }, 50);\r\n}\r\nfunction removeBodyEvents() {\r\n  document.removeEventListener(\"contextmenu\", onBodyClick, true);\r\n  document.removeEventListener(\"click\", onBodyClick, true);\r\n  document.removeEventListener(\"scroll\", onBodyScroll, true);\r\n  if (!props.isFullScreenContainer && container.value)\r\n    container.value.removeEventListener(\"scroll\", onBodyScroll, true);\r\n  if (options.value.keyboardControl !== false)\r\n    document.removeEventListener('keydown', onMenuKeyDown);\r\n}\r\n\r\n//For keyboard event, remember which submenu is active\r\nconst currentOpenedMenu = ref<SubMenuContext|null>();\r\nprovide('globalSetCurrentSubMenu', (menu: SubMenuContext|null) => currentOpenedMenu.value = menu);\r\n\r\nfunction onMenuKeyDown(e: KeyboardEvent) {\r\n  let handled = true;\r\n  //Handle keyboard event\r\n  switch(e.key) {\r\n    case \"Escape\": {\r\n      if (currentOpenedMenu.value?.isTopLevel() === false) {\r\n        currentOpenedMenu.value?.closeCurrentSubMenu();\r\n      } else {\r\n        closeMenu();\r\n      }\r\n      break;\r\n    }\r\n    case \"ArrowDown\":\r\n      currentOpenedMenu.value?.moveCurrentItemDown();\r\n      break;\r\n    case \"ArrowUp\":\r\n      currentOpenedMenu.value?.moveCurrentItemUp();\r\n      break;\r\n    case \"Home\":\r\n      currentOpenedMenu.value?.moveCurrentItemFirst();\r\n      break;\r\n    case \"End\":\r\n      currentOpenedMenu.value?.moveCurrentItemLast();\r\n      break;\r\n    case \"ArrowLeft\": {\r\n      if (!currentOpenedMenu.value?.closeSelfAndActiveParent())\r\n        options.value.onKeyFocusMoveLeft?.();\r\n      break;\r\n    }\r\n    case \"ArrowRight\":\r\n      if (!currentOpenedMenu.value?.openCurrentItemSubMenu())\r\n        options.value.onKeyFocusMoveRight?.();\r\n      break;\r\n    case \"Enter\":\r\n      currentOpenedMenu.value?.triggerCurrentItemClick(e);\r\n      break;\r\n    default:\r\n      handled = false;\r\n      break;\r\n  }\r\n  if (handled && currentOpenedMenu.value) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n}\r\nfunction onBodyScroll() {\r\n  //close when docunment scroll\r\n  if (options.value.closeWhenScroll !== false)\r\n    closeMenu();\r\n}\r\nfunction onBodyClick(e: MouseEvent) {\r\n  checkTargetAndClose(e.target as HTMLElement, e);\r\n}\r\nfunction checkTargetAndClose(target: HTMLElement, e: MouseEvent) {\r\n  //Loop target , Check whether the currently clicked element belongs to the current menu.\r\n  // If yes, it will not be closed\r\n  while (target) {\r\n    if (target.classList && target.classList.contains('mx-menu-host'))\r\n      return;\r\n    target = target.parentNode as HTMLElement;\r\n  }\r\n  if (options.value.clickCloseOnOutside !== false) {\r\n    //Close menu\r\n    removeBodyEvents();\r\n    closeMenu();\r\n  } else {\r\n    options.value.onClickOnOutside?.(e);\r\n  }\r\n}\r\n\r\n//provide globalOptions for child use\r\nprovide('globalOptions', options);\r\nprovide('globalCloseMenu', closeMenu);\r\nprovide('globalIsFullScreenContainer', props.isFullScreenContainer);\r\n//check slot exists\r\nprovide('globalHasSlot', (name: string) => {\r\n  return slots[name] !== undefined;\r\n});\r\n//render slot\r\nprovide('globalRenderSlot', (name: string, params: Record<string, unknown>) => {\r\n  return renderSlot(slots, name, { ...params }, () => [ h('span', 'Render slot failed') ], false);\r\n});\r\n//provide menuContext for child use\r\nprovide('menuContext', {\r\n  zIndex: options.value.zIndex || MenuConstOptions.defaultZindex,\r\n  container: container.value as unknown as HTMLElement,\r\n  adjustPadding: { x: 0, y: 0 },\r\n  getParentAbsY: () => options.value.x,\r\n  getParentAbsX: () => options.value.y,\r\n  getZoom: () => options.value.zoom || MenuConstOptions.defaultZoom,\r\n  getParentX: () => 0,\r\n  getParentY: () => 0,\r\n  getParentWidth: () => 0,\r\n  getParentHeight: () => 0,\r\n  getPositon: () => [options.value.x,options.value.y],\r\n  closeOtherSubMenuWithTimeOut: () => {/* Do nothing */},\r\n  checkCloseOtherSubMenuTimeOut: () => false,\r\n  addOpenedSubMenu: () => {/* Do nothing */},\r\n  closeOtherSubMenu: () => {/* Do nothing */},\r\n  getParentContext: () => null,\r\n  getSubMenuInstanceContext: () => null,\r\n  getElement: () => null,\r\n  addChildMenuItem: () => {/* Do nothing */},\r\n  removeChildMenuItem: () => {/* Do nothing */},\r\n  markActiveMenuItem: () => {/* Do nothing */},\r\n  markThisOpenedByKeyBoard: () => {/* Do nothing */},\r\n  isOpenedByKeyBoardFlag: () => false,\r\n  isMenuItemDataCollectedFlag: () => false,\r\n} as SubMenuParentContext);\r\n\r\n//Expose instance function\r\ndefineExpose(instance);\r\n</script>\r\n\r\n<style>\r\n.mx-menu-ghost-host {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  top: 0;\r\n  overflow: hidden;\r\n  pointer-events: none;\r\n}\r\n.mx-menu-ghost-host.fullscreen {\r\n  position: fixed;\r\n}\r\n</style>\r\n", "<script lang=\"ts\">\r\nimport { defineComponent, h, Teleport, toRefs, ref } from 'vue'\r\nimport type { PropType, VNode } from 'vue'\r\nimport type { ContextMenuInstance, MenuOptions } from './ContextMenuDefine'\r\nimport { genContainer } from \"./ContextMenuUtils\";\r\nimport ContextSubMenuWrapperConstructor from './ContextSubMenuWrapper.vue'\r\n\r\nexport type GlobalHasSlot = (name: string) => boolean;\r\nexport type GlobalRenderSlot = (name: string, params: Record<string, unknown>) => VNode;\r\n\r\n/**\r\n * Context menu component\r\n */\r\nexport default defineComponent({\r\n  name: 'ContextMenu',\r\n  emits: [ 'update:show', 'close' ],\r\n  props: {\r\n    /**\r\n     * Menu options\r\n     */\r\n    options: {\r\n      type: Object as PropType<MenuOptions>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Show menu?\r\n     */\r\n    show: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n  },\r\n  setup(props, ctx) {\r\n\r\n    const {\r\n      options,\r\n      show,\r\n    } = toRefs(props);\r\n\r\n    const menuRef = ref<ContextMenuInstance | null>(null);\r\n\r\n    ctx.expose({\r\n      closeMenu: () => ctx.emit('update:show', false),\r\n      isClosed: () => !show.value,\r\n      getMenuRef: () => menuRef.value?.getMenuRef(),\r\n      getMenuDimensions: () => menuRef.value?.getMenuDimensions() ?? { width: 0, height: 0 },\r\n    });\r\n\r\n    return () => {  \r\n      const { isNew, container, eleId } = genContainer(options.value);\r\n      \r\n      return [\r\n        h(\r\n          Teleport,\r\n          { to: `#${eleId}` },\r\n          [\r\n            h(ContextSubMenuWrapperConstructor as unknown as string, {\r\n              ref: menuRef,\r\n              options: options,\r\n              show: show,\r\n              container: container,\r\n              isFullScreenContainer: !isNew,\r\n              onClose: (fromItem: undefined) => {\r\n                ctx.emit('update:show', false);\r\n                ctx.emit('close');\r\n                options.value.onClose?.(fromItem);\r\n              },\r\n            }, ctx.slots)\r\n          ]\r\n        )\r\n      ];\r\n    }\r\n  },\r\n})\r\n</script>\r\n", "<script lang=\"ts\">\r\nimport { defineComponent, h, inject, ref, toRefs } from 'vue'\r\nimport type { PropType, Ref, SVGAttributes } from 'vue'\r\nimport ContextSubMenuConstructor from './ContextSubMenu.vue';\r\nimport ContextMenuItemConstructor from './ContextMenuItem.vue';\r\nimport type { MenuOptions } from './ContextMenuDefine';\r\n\r\nexport default defineComponent({\r\n  name: 'ContextMenuGroup',\r\n  props: {\r\n     /**\r\n     * Is this menu disabled? \r\n     */\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n     /**\r\n     * Is this menu hidden? \r\n     */\r\n    hidden: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Is this menu disabled? \r\n     */\r\n    clickHandler: {\r\n      type: Function as PropType<() => void>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Menu label\r\n     */\r\n    label: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Menu icon (for icon class)\r\n     */\r\n    icon: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Custom icon library font class name.\r\n     * \r\n     * Only for css font icon, If you use the svg icon, you do not need to use this.\r\n     */\r\n    iconFontClass: {\r\n      type: String,\r\n      default: 'iconfont'\r\n    },\r\n    /**\r\n     * Is this menu item checked?\r\n     * \r\n     * The check mark are displayed on the left side of the icon, so it is not recommended to display the icon at the same time.\r\n     */\r\n     checked: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Shortcut key text display on the right.\r\n     * \r\n     * The shortcut keys here are only for display. You need to handle the key events by yourself.\r\n     */\r\n    shortcut: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Display icons use svg symbol (`<use xlink:href=\"#icon-symbol-name\">`) ， only valid when icon attribute is empty.\r\n     */\r\n    svgIcon: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * The user-defined attribute of the svg tag, which is valid when using `svgIcon`.\r\n     */\r\n    svgProps: {\r\n      type: Object as PropType<SVGAttributes>,\r\n      default: null\r\n    },\r\n    /**\r\n     * Should a fixed-width icon area be reserved for menu items without icon. (this item)\r\n     * \r\n     * Default is true .\r\n     * \r\n     * The width of icon area can be override with css var `--mx-menu-placeholder-width`.\r\n     */\r\n    preserveIconWidth: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    /**\r\n     * Show right arrow on this menu?\r\n     */\r\n    showRightArrow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * Should close menu when Click this menu item ?\r\n     */\r\n    clickClose: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * By default, the submenu will automatically adjust its position to prevent it overflow the container.\r\n     * \r\n     * If you allow menu overflow containers, you can set this to false.\r\n     * \r\n     * Default is inherit from `MenuOptions.adjustPosition`  .\r\n     */\r\n    adjustSubMenuPosition: {\r\n      type: Boolean,\r\n      default: undefined\r\n    },\r\n    /**\r\n     * Max width of submenu\r\n     */\r\n    maxWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n    /**\r\n     * Min width of submenu\r\n     */\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 0,\r\n    },\r\n  },\r\n  setup(props, ctx) {\r\n    \r\n    const options = inject('globalOptions') as Ref<MenuOptions>;\r\n    const { adjustSubMenuPosition, maxWidth, minWidth } = toRefs(props);\r\n    const adjustSubMenuPositionValue = typeof adjustSubMenuPosition.value !== 'undefined' ? adjustSubMenuPosition.value : options.value.adjustPosition;\r\n    \r\n    const subMenuRef = ref();\r\n    const itemRef = ref();\r\n\r\n    ctx.expose({\r\n      getSubMenuRef: () => subMenuRef.value,\r\n      getMenuItemRef: () => itemRef.value,\r\n    })\r\n\r\n    //Create Item\r\n    return () => h(ContextMenuItemConstructor, {\r\n      ...props,\r\n      ref: itemRef,\r\n      showRightArrow: true,\r\n      maxWidth: undefined,\r\n      minWidth: undefined,\r\n      adjustSubMenuPosition: undefined,\r\n      hasChildren: typeof ctx.slots.default !== undefined,\r\n    }, ctx.slots.default ? {\r\n      //Create SubMenu\r\n      submenu: () => h(ContextSubMenuConstructor, {\r\n        ref: subMenuRef,\r\n        maxWidth: maxWidth.value,\r\n        minWidth: minWidth.value,\r\n        adjustPosition: adjustSubMenuPositionValue,\r\n      }, {\r\n        default: ctx.slots.default,\r\n      })\r\n    } : undefined);\r\n  },\r\n})\r\n</script>", "import { h, ref, render } from \"vue\";\r\nimport type { App, Slot } from \"vue\";\r\nimport type { ContextMenuInstance } from \"./ContextMenuDefine\";\r\nimport type { MenuOptions } from \"./ContextMenuDefine\";\r\nimport { checkOpenedContextMenu, closeContextMenu } from \"./ContextMenuMutex\";\r\nimport { genContainer, transformMenuPosition } from \"./ContextMenuUtils\";\r\nimport ContextMenuConstructor from './ContextMenu.vue'\r\nimport ContextSubMenuWrapperConstructor from './ContextSubMenuWrapper.vue'\r\nimport ContextSubMenuConstructor from './ContextSubMenu.vue'\r\nimport ContextMenuItemConstructor from './ContextMenuItem.vue'\r\nimport ContextMenuGroupConstructor from './ContextMenuGroup.vue'\r\nimport ContextMenuSeparatorConstructor from './ContextMenuSeparator.vue'\r\n\r\nfunction initInstance(\r\n  options: MenuOptions, \r\n  container: HTMLElement, \r\n  isNew: boolean, \r\n  customSlots?: Record<string, Slot>,\r\n) {\r\n  const show = ref(true);\r\n  const vnode = h(ContextSubMenuWrapperConstructor, { \r\n    options: options,\r\n    show: show,\r\n    container: container,\r\n    isFullScreenContainer: !isNew,\r\n    onCloseAnimFinished: () => {\r\n      render(null, container);\r\n    },\r\n    onClose: (item: undefined) => {\r\n      options.onClose?.(item);\r\n      show.value = false;\r\n    },\r\n  }, customSlots);\r\n  render(vnode, container);\r\n  return vnode.component;\r\n}\r\n\r\n//Show global contextmenu\r\nfunction $contextmenu(options : MenuOptions, customSlots?: Record<string, Slot>) {\r\n  const container = genContainer(options);\r\n  const component = initInstance(options, container.container, container.isNew, customSlots);\r\n  return (component as unknown as Record<string, unknown>).exposed as ContextMenuInstance;\r\n}\r\n\r\nexport default {\r\n  /**\r\n   * For Vue install\r\n   * @param app \r\n   */\r\n  install(app: App<Element>) : void {\r\n    app.config.globalProperties.$contextmenu = $contextmenu;\r\n    app.component('ContextMenu', ContextMenuConstructor);\r\n    app.component('ContextMenuItem', ContextMenuItemConstructor);\r\n    app.component('ContextMenuGroup', ContextMenuGroupConstructor);\r\n    app.component('ContextMenuSperator', ContextMenuSeparatorConstructor);\r\n    app.component('ContextMenuSeparator', ContextMenuSeparatorConstructor);\r\n    app.component('ContextSubMenu', ContextSubMenuConstructor);\r\n  },\r\n  /**\r\n   * Show a ContextMenu in page, same as `this.$contextmenu`\r\n   * \r\n   * For example:\r\n   * \r\n   * ```ts\r\n   * onContextMenu(e : MouseEvent) {\r\n   *   //prevent the browser's default menu\r\n   *   e.preventDefault();\r\n   *   //show your menu\r\n   *   ContextMenu.showContextMenu({\r\n   *     x: e.x,\r\n   *     y: e.y,\r\n   *     items: [\r\n   *       { \r\n   *         label: \"A menu item\", \r\n   *         onClick: () => {\r\n   *           alert(\"You click a menu item\");\r\n   *         }\r\n   *       },\r\n   *       { \r\n   *         label: \"A submenu\", \r\n   *         children: [\r\n   *           { label: \"Item1\" },\r\n   *           { label: \"Item2\" },\r\n   *           { label: \"Item3\" },\r\n   *         ]\r\n   *       },\r\n   *     ]\r\n   *   }); \r\n   * }\r\n   * ```\r\n   * \r\n   * You can pass customSlots to custom rendering this menu.\r\n   * \r\n   * For example, custom rendering #itemRender and #separatorRender:\r\n   * ```ts\r\n   *   ContextMenu.showContextMenu({\r\n   *     ...\r\n   *   } as MenuOptions, {\r\n   *     //Use slot in function mode\r\n   *     itemRender: ({ disabled, label, icon, showRightArrow, onClick, onMouseEnter }) => [  h('div', { \r\n   *       class: 'my-menu-item'+(disabled?' disabled':''),\r\n   *       onMouseenter: onMouseEnter,\r\n   *       onClick: onClick,\r\n   *     }, [\r\n   *       icon ? h('img', { src: icon }) : h('div', { class: 'icon-place-holder' }),\r\n   *       h('span', label),\r\n   *       showRightArrow ? h('span', { class: 'right-arraw' }, '>>') : h('div'),\r\n   *     ]) ],\r\n   *     separatorRender: () => [ h('div', { class: 'my-menu-sperator' }) ]\r\n   *   })\r\n   * ```\r\n   * \r\n   * @param options The options of ContextMenu\r\n   * @param customSlots You can provide some custom slots to customize the rendering style of the menu. These slots are the same as the slots of component ContextMenu.\r\n   * @returns Menu instance \r\n   */\r\n  showContextMenu(options : MenuOptions, customSlots?: Record<string, Slot>) : ContextMenuInstance {\r\n    return $contextmenu(options, customSlots);\r\n  },\r\n  /**\r\n   * Get if there is a menu open now.\r\n   */\r\n  isAnyContextMenuOpen() {\r\n    return checkOpenedContextMenu();\r\n  },\r\n  /**\r\n   * Close the currently open menu\r\n   */\r\n  closeContextMenu,\r\n  //Tools\r\n  transformMenuPosition,\r\n}\r\n\r\n", "<template>\r\n  <svg class=\"mx-menu-bar-icon-menu\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><path d=\"M133.310936 296.552327l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949 0-19.781623-15.997312-35.950949-35.950949-35.950949L133.310936 224.650428c-19.781623 0-35.950949 16.169326-35.950949 35.950949C97.359987 280.383 113.529313 296.552327 133.310936 296.552327z\"></path><path d=\"M890.51705 476.135058 133.310936 476.135058c-19.781623 0-35.950949 16.169326-35.950949 35.950949 0 19.781623 16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-16.169326 35.950949-35.950949C926.467999 492.304384 910.298673 476.135058 890.51705 476.135058z\"></path><path d=\"M890.51705 727.447673 133.310936 727.447673c-19.781623 0-35.950949 15.997312-35.950949 35.950949s16.169326 35.950949 35.950949 35.950949l757.206115 0c19.781623 0 35.950949-15.997312 35.950949-35.950949S910.298673 727.447673 890.51705 727.447673z\"></path></svg>\r\n</template>", "<template>\r\n  <div \r\n    :class=\"[ \r\n      'mx-menu-bar',\r\n      options.theme ?? '',\r\n      options.mini ? 'mini' : '',\r\n    ]\"\r\n    @focus=\"onFocus\"\r\n    @blur=\"onBlur\"\r\n  >\r\n    <slot name=\"prefix\" />\r\n    \r\n    <div \r\n      v-if=\"options.mini\"\r\n      ref=\"menuBarContent\"\r\n      class=\"mx-menu-bar-content\"\r\n    >\r\n      <div \r\n        class=\"mx-menu-bar-item\"\r\n        @click=\"onItemClick(0, null)\"\r\n      >\r\n        <MenuBarIconMenu />\r\n      </div>\r\n    </div>\r\n    <div \r\n      v-else\r\n      ref=\"menuBarContent\"\r\n      class=\"mx-menu-bar-content\"\r\n    >\r\n      <div \r\n        v-for=\"(item, key) in menuItems\" \r\n        :key=\"key\"\r\n        :class=\"[\r\n          'mx-menu-bar-item',\r\n          item == menuActive ? 'active' : '',\r\n        ]\"\r\n        @click=\"onItemClick(key, item as MenuItem)\"\r\n        @mouseenter=\"onItemEnter(key, item as MenuItem)\"\r\n      >\r\n        {{ item.label }}\r\n      </div>\r\n    </div>\r\n    <slot name=\"suffix\" />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n/**\r\n * Menu bar component\r\n */\r\nimport { ref, type PropType, onMounted, watch } from 'vue';\r\nimport type { MenuBarOptions } from './MenuBar';\r\nimport type { ContextMenuInstance, MenuItem } from './ContextMenuDefine';\r\nimport { getTop, getLeft } from './ContextMenuUtils';\r\nimport ContextMenu from './ContextMenuInstance';\r\nimport MenuBarIconMenu from './MenuBarIconMenu.vue';\r\n\r\nconst props = defineProps({\r\n  /**\r\n   * Menu options\r\n   */\r\n  options: {\r\n    type: Object as PropType<MenuBarOptions>,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst menuBarContent = ref<HTMLDivElement>();\r\nconst menuBarActive = ref(false);\r\nconst menuItems = ref<MenuItem[]>([]);\r\nconst menuActive = ref<MenuItem|null>(null);\r\n\r\nfunction onFocus() {\r\n  menuBarActive.value = true;\r\n}\r\nfunction onBlur() {\r\n  menuBarActive.value = false;\r\n}\r\n\r\nonMounted(() => {\r\n  (menuItems.value as MenuItem[]) = props.options.items || [];\r\n});\r\nwatch(() => props.options, () => {\r\n  (menuItems.value as MenuItem[]) = props.options.items || [];\r\n});\r\n\r\nlet currentMenu : ContextMenuInstance|null = null;\r\nlet currentMenuIndex = -1;\r\n\r\nfunction showNextSubMenu() {\r\n  if (currentMenuIndex < menuItems.value.length - 1)\r\n    currentMenuIndex++;\r\n  else \r\n    currentMenuIndex = 0;\r\n  showSubMenu(currentMenuIndex, menuItems.value[currentMenuIndex] as MenuItem);\r\n}\r\nfunction showPrevSubMenu() {\r\n  if (currentMenuIndex > 0)\r\n    currentMenuIndex--;\r\n  else \r\n    currentMenuIndex = menuItems.value.length - 1;\r\n  showSubMenu(currentMenuIndex, menuItems.value[currentMenuIndex] as MenuItem);\r\n}\r\nfunction getMenuShowPos(ele: HTMLElement) {\r\n  const showDirection = props.options.barPopDirection ?? 'bl';\r\n  let x = 0; \r\n  let y = 0;\r\n  if (showDirection.startsWith('b'))\r\n    y = getTop(ele) + ele.offsetHeight;\r\n  else if (showDirection.startsWith('t'))\r\n    y = getTop(ele);\r\n  else \r\n    y = getTop(ele) + ele.offsetHeight / 2;\r\n\r\n  if (showDirection.endsWith('l'))\r\n    x = getLeft(ele);\r\n  else if (showDirection.startsWith('r'))\r\n    x = getLeft(ele) + ele.offsetWidth;\r\n  else \r\n    x = getLeft(ele) + ele.offsetWidth / 2;\r\n\r\n  return { x, y }\r\n}\r\nfunction showSubMenu(index: number, item: MenuItem) {\r\n  currentMenuIndex = index;\r\n  if (!item.children)\r\n    return;\r\n  if (currentMenu) {\r\n    currentMenu.closeMenu();\r\n    currentMenu = null;\r\n    menuBarActive.value = true;\r\n  }\r\n  (menuActive.value as MenuItem) = item;\r\n  const ele = menuBarContent.value?.children[index] as HTMLElement;\r\n  if (ele) {\r\n    const { x, y } = getMenuShowPos(ele);\r\n\r\n    currentMenu = ContextMenu.showContextMenu({\r\n      ...props.options,\r\n      items: item.children,\r\n      x,\r\n      y,\r\n      onKeyFocusMoveLeft() {\r\n        showPrevSubMenu();\r\n      },\r\n      onKeyFocusMoveRight() {\r\n        showNextSubMenu();\r\n      },\r\n      onClose() {\r\n        if (menuActive.value == item) {\r\n          menuBarActive.value = false;\r\n          menuActive.value = null;\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\nfunction showAllSubMenu() {\r\n  currentMenuIndex = 0;\r\n  const ele = menuBarContent.value as HTMLElement;\r\n  if (ele) {\r\n    const { x, y } = getMenuShowPos(ele);\r\n    currentMenu = ContextMenu.showContextMenu({\r\n      ...props.options,\r\n      x,\r\n      y,\r\n    });\r\n  }\r\n}\r\n\r\nfunction onItemClick(index: number, item: MenuItem|null) {\r\n  if (item) {\r\n    menuBarActive.value = true;\r\n    showSubMenu(index, item);\r\n    if (\r\n      item.onClick && (\r\n      (item.clickableWhenHasChildren === true && item.children && item.children.length > 0)\r\n      || !item.children || item.children.length === 0)\r\n    )\r\n      item.onClick();\r\n  } else {\r\n    showAllSubMenu();\r\n  }\r\n}\r\nfunction onItemEnter(index: number, item: MenuItem) {\r\n  if (menuBarActive.value) {\r\n    showSubMenu(index, item);\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import './MenuBar.scss';\r\n</style>"],
  "mappings": "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",
  "names": ["currentOpenedContextMenu", "checkOpenedContextMenu", "addOpenedContextMenu", "inst", "closeContextMenu", "removeOpenedContextMenu", "MenuConstOptions", "getTop", "e", "stopNode", "offset", "getLeft", "transformMenuPosition", "offsetX", "offsetY", "container", "DEFAULT_CONTAINER_ID", "GEN_CONTAINER_ID", "containerId", "genContainer", "options", "getContainer", "zIndex", "eleId", "solveNumberOrStringSize", "value", "VNodeRender", "defineComponent", "props", "vnode", "data", "toRefs", "_hoisted_1", "_hoisted_3", "_sfc_render", "_ctx", "_cache", "__props", "emit", "__emit", "clickHandler", "clickClose", "clickableWhenHasChildren", "disabled", "hidden", "label", "icon", "iconFontClass", "showRightArrow", "shortcut", "hasChildren", "showSubMenu", "ref", "keyBoardFocusMenu", "menuItemRef", "inject", "globalHasSlot", "globalRenderSlot", "globalCloseMenu", "menuContext", "menuItemInstance", "onMouseEnter", "onClick", "provide", "onMounted", "nextTick", "index", "parentEl", "indexCounting", "i", "el", "onBeforeUnmount", "currentTarget", "closeSubMenu", "getItemDataForChildren", "__expose", "_sfc_main$6", "_component_VNodeRender", "_resolveComponent", "_openBlock", "_createBlock", "_createElementBlock", "_sfc_main$5", "ContextMenuItem", "ContextMenuSeparator", "ContextMenuIconRight", "parentContext", "getParentWidth", "getParentHeight", "getZoom", "adjustPosition", "submenuRoot", "menu", "scroll", "upScrollButton", "openedSubMenuClose", "globalSetCurrentSubMenu", "menuItems", "currentItem", "leaveTimeout", "blurCurrentMenu", "setAndFocusNotDisableItem", "isDown", "startIndex", "setAndFocusCurrentMenu", "overflow", "element", "scrollValue", "scrollHeight", "maxHeight", "onSubMenuBodyClick", "thisMenuInsContext", "parent", "thisMenuContext", "conext", "_a", "isOpenedByKeyBoardFlag", "isMenuItemDataCollectedFlag", "position", "closeFn", "k", "item", "updateState", "exposeContext", "v", "x", "y", "onScroll", "down", "onMouseWhellMx", "onMouseWhell", "pos", "menuEl", "parentWidth", "parentHeight", "fillPaddingX", "fillPaddingYAlways", "_b", "fillPaddingY", "windowHeight", "windowWidth", "avliableWidth", "avliableHeight", "absX", "absY", "xOverflow", "yOverflow", "ox", "maxSubWidth", "oy", "maxSubHeight", "_hoisted_2", "_normalizeClass", "_normalizeStyle", "args", "_createElementVNode", "_createCommentVNode", "_Fragment", "_renderList", "_component_ContextMenuSeparator", "_component_ContextMenuItem", "_createSlots", "_withCtx", "_createVNode", "_component_ContextSubMenu", "_withDirectives", "$event", "_component_ContextMenuIconRight", "_vShow", "slots", "useSlots", "submenuInstance", "show", "openMenu", "removeBodyEvents", "watch", "instance", "closeMenu", "isClosed", "closed", "installBodyEvents", "fromItem", "onBodyClick", "onBodyScroll", "onMenuKeyDown", "currentOpenedMenu", "handled", "_c", "_d", "_e", "_f", "_g", "_i", "_h", "_j", "_l", "_k", "_m", "checkTargetAndClose", "target", "name", "params", "renderSlot", "h", "_sfc_main$3", "ctx", "menuRef", "isNew", "Teleport", "ContextSubMenuWrapperConstructor", "_sfc_main$2", "adjustSubMenuPosition", "maxWidth", "minWidth", "adjustSubMenuPositionValue", "subMenuRef", "itemRef", "ContextMenuItemConstructor", "ContextSubMenuConstructor", "initInstance", "customSlots", "render", "$contextmenu", "Inst", "app", "ContextMenuConstructor", "ContextMenuGroupConstructor", "ContextMenuSeparatorConstructor", "_hoisted_5", "menuBarContent", "menuBarActive", "menuActive", "onFocus", "onBlur", "currentMenu", "currentMenuIndex", "showNextSubMenu", "showPrevSubMenu", "getMenuShowPos", "ele", "showDirection", "ContextMenu", "showAllSubMenu", "onItemClick", "onItemEnter"]
}
